------ Aula02 -------------------

SELECT * FROM [dbo].[MSreplication_options]

SELECT * FROM [dbo].[spt_monitor]


SELECT * FROM [dbo].[spt_monitorDSDFDF]



CREATE DATABASE [TESTE_1]


CREATE DATABASE [TESTE_2]
ON ( NAME = TESTE_2_DAT, FILENAME = 'F:\TEMP\TESTE_2.MDF', SIZE = 10,MAXSIZE = 50, FILEGROWTH = 5 )  
LOG ON  
( NAME = TESTE_2_LOG,  FILENAME = 'F:\TEMP\TESTE_2.LDF', SIZE = 10MB,  MAXSIZE = 50MB,  FILEGROWTH = 5MB )



DROP DATABASE [TESTE_1]


DROP DATABASE [TESTE_2]



---------- Aula 03 - Gerenciado as tabelas do banco de dados --------------------------


CREATE DATABASE  [ESQUINA_VENDAS]


USE [ESQUINA_VENDAS]

CREATE TABLE [TABELA DE CLIENTES]
( [CPF] [VARCHAR] (11) ,
[NOME] [VARCHAR] (100) ,
[ENDERECO] [VARCHAR] (150) ,
[COMPLEMENTO] [VARCHAR] (150) ,
[BAIRRO] [VARCHAR] (50) ,
[CIDADE] [VARCHAR] (50) ,
[ESTADO] [VARCHAR] (2) ,
[CEP] [VARCHAR] (8) ,
[DATA DE NASCIMENTO] [DATE],
[IDADE] [SMALLINT],
[SEXO] [VARCHAR] (1) ,
[LIMITE DE CREDITO] [MONEY] ,
[VOLUME DE COMPRA] [FLOAT] ,
[PRIMEIRA COMPRA] [BIT] )


-------------------------------------------------
USE [ESQUINA_VENDAS]

CREATE TABLE [TABELA DE PRODUTOS](
    [CODIGO DO PRODUTO] [VARCHAR](10),
    [NOME DO PRODUTO][VARCHAR](50),
    [EMBALAGEM][VARCHAR](20),
    [TAMANHO][VARCHAR](10),
    [SABOR][VARCHAR](20),
    [PRECO DE LISTA][SMALLMONEY])


-------------------------------------------------

USE [ESQUINA_VENDAS]

CREATE TABLE [TABELA DE VENDEDORES]
( [MATRICULA] [VARCHAR](5),
[NOME][VARCHAR](100),
[PERCENTUAL COMISSAO] [FLOAT])




--------------------- Aula 04 - Manutenção de dados na tabela --------------------------

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO],[NOME DO PRODUTO],[EMBALAGEM],[TAMANHO],[SABOR],[PRECO DE LISTA])
VALUES ('1040107','Light - 350 ml - Melancia','Lata','350 ml','Melancia',4.56)



------------ RESPOSTA DO DESAFIO 01 -----------
--INSERINDO REGISTROS NA TABELA DE VENDEDORES
USE [ESQUINA_VENDAS]

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00122','Joabe da Silva Freitas',0.10)



---- Acrescentando com dois inserts de uma vez ------

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO],[NOME DO PRODUTO],[EMBALAGEM],[TAMANHO],[SABOR],[PRECO DE LISTA])
VALUES ('1037797','Clean - 2 Litros - Laranja','PET','2 Litros','Laranja',16.01)

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO],[NOME DO PRODUTO],[EMBALAGEM],[TAMANHO],[SABOR],[PRECO DE LISTA])
VALUES ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.31)


------------ RESPOSTA DO DESAFIO 02 -----------
INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00133','Marly dos Santos Gama',0.08)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00144','Bruno César Brandão',0.05)

-----------------------------------------------

-- TIVEMOS ALGUNS INSERTS PELO ASSITENTE NA TABELA DE PRODUTOS (NÃO FORAM REGISTRADOS AQUI!)


-----REPOSTA DO DESAFIO 03 USADO PELO ASSISTENTE ------

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00155','Roberta Martins',0.11)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00166','Pericles Alves',0.07)


------INCLUINDO DOIS REGISTROS DE FORMA ERRADA --------

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA])
VALUES
('544931', 'Frescor do Verão - 350 ml - Limão', 'PET', '350 ml','Limão',3.20)

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA])
VALUES
('1078680', 'Frescor do Verão - 470 ml - Manga', 'Lata', '470 ml','Manga',5.18)


--ATUALIZANDO PARA FORMA CORRETA
UPDATE [TABELA DE PRODUTOS] 
SET [EMBALAGEM] = 'Lata',
[PRECO DE LISTA] = 2.46
WHERE [CODIGO DO PRODUTO] = '544931'

UPDATE [TABELA DE PRODUTOS] 
SET [EMBALAGEM] = 'Garrafa'
WHERE [CODIGO DO PRODUTO] = '1078680'


-----RESPOSTA DO DESAFIO 04 ------------------

UPDATE [TABELA DE VENDEDORES]
SET [PERCENTUAL COMISSÃO] = 0.11
WHERE MATRICULA = '00166'

UPDATE [TABELA DE VENDEDORES]
SET NOME = 'Roberta Serra'
WHERE MATRICULA = '00155'


---- DELETANDO UM REGISTRO DA TABELA --------------------
DELETE FROM [TABELA DE PRODUTOS]
WHERE [CODIGO DO PRODUTO] = '1088126'


---RESPOTA DO DESAFIO 05 ------

DELETE FROM [TABELA DE VENDEDORES]
WHERE [MATRICULA] = '00122'


--------------------------------------- Aula 5 – Chave Primária e manipulando outros tipos de dados -----------------------------------------

-- INSERINDO VARIAS VEZES REGISTROS REPETIDOS
INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO],[NOME DO PRODUTO],[EMBALAGEM],[TAMANHO],[SABOR],[PRECO DE LISTA])
VALUES ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.31)

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO],[NOME DO PRODUTO],[EMBALAGEM],[TAMANHO],[SABOR],[PRECO DE LISTA])
VALUES ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.31)

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO],[NOME DO PRODUTO],[EMBALAGEM],[TAMANHO],[SABOR],[PRECO DE LISTA])
VALUES ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.31)


-------CRIAÇÃO COM A CHAVE PRIMÁRIA

-- ABERTURA DE  PARENTESES  COM O COMANDO ALTER TABLE
--CRIANDO A CHAVE PRIMÁRIA
ALTER TABLE [TABELA DE PRODUTOS]
ADD CONSTRAINT PK_PRODUTOS
PRIMARY KEY   ([CODIGO DO PRODUTO])

-- ALTERANDO UM CAMPO COM O NOT NULL
ALTER TABLE [TABELA DE PRODUTOS]
ALTER COLUMN [CODIGO DO PRODUTO]
VARCHAR (10) NOT NULL


--ABERTURA DE PARENTESES COM O DESAFIO SOBRE O ALTER TABLE


-- ALTERANDO UM CAMPO COM O NOT NULL
ALTER TABLE [TABELA DE VENDEDORES]
ALTER COLUMN [MATRICULA]
VARCHAR(5) NOT NULL

--CRIANDO A CHAVE PRIMÁRIA
ALTER TABLE [TABELA DE VENDEDORES]
ADD CONSTRAINT PK_VENDEDORES
PRIMARY KEY  ([MATRICULA])


--EXCLUINDO A TABELA DE PRODUTOS
DROP TABLE [TABELA DE PRODUTOS]

--CRIANDO A TABELA DE PRODUTOS COM CHAVE PRIMÁRIA
CREATE TABLE [TABELA DE PRODUTOS](
    [CODIGO DO PRODUTO] [VARCHAR](10),
    [NOME DO PRODUTO][VARCHAR](50),
    [EMBALAGEM][VARCHAR](20),
    [TAMANHO][VARCHAR](10),
    [SABOR][VARCHAR](20),
    [PRECO DE LISTA][SMALLMONEY],
    PRIMARY KEY  ([CODIGO DO PRODUTO])
    
)


--INSERINDO DADOS NA TABELA DE PRODUTOS

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO],[NOME DO PRODUTO],[EMBALAGEM],[TAMANHO],[SABOR], [PRECO DE LISTA])
  VALUES 
  ('1040107','Light - 350 ml - Melancia','Lata','350 ml','Melancia',4.56),
  ('1037797','Clean - 2 Litros - Laranja','PET','2 Litros','Laranja',16.01),
  ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.31),
  ('1004327','Videira do Campo - 1,5 Litros - Melancia','PET','1,5 Litros','Melancia',19.51),
  ('1088126','Linha Citros - 1 Litro - Limão','PET','1 Litro','Limão',7.00),
  ('544931','Frescor do Verão - 350 ml - Limão','Lata','350 ml','Limão',2.46),
  ('1078680','Frescor do Verão - 470 ml - Manga','Garrafa','470 ml','Manga',5.18)



--EXCLUINDO A TABELA DE CLIENTES
DROP TABLE [TABELA DE CLIENTES]


--CRIANDO A TABELA DE CLIENTES COM A CHAVE PRIMÁRIA
CREATE TABLE [TABELA DE CLIENTES]
( [CPF] [VARCHAR] (11) ,
[NOME] [VARCHAR] (100) ,
[ENDERECO] [VARCHAR] (150) ,
[COMPLEMENTO] [VARCHAR] (150) ,
[BAIRRO] [VARCHAR] (50) ,
[CIDADE] [VARCHAR] (50) ,
[ESTADO] [VARCHAR] (2) ,
[CEP] [VARCHAR] (8) ,
[DATA DE NASCIMENTO] [DATE],
[IDADE] [SMALLINT],
[SEXO] [VARCHAR] (1) ,
[LIMITE DE CREDITO] [MONEY] ,
[VOLUME DE COMPRA] [FLOAT] ,
[PRIMEIRA COMPRA] [BIT],

PRIMARY KEY ([CPF])
)


-- INSERINDO REGISTRO NA TABELA DE CLIENTES E VERIFICANDO O TIPO DE DATA E TIPO BIT
INSERT INTO [TABELA DE CLIENTES] 
([CPF],
[NOME],
[ENDERECO],
[COMPLEMENTO],
[BAIRRO],
[CIDADE],
[ESTADO],
[CEP],
[DATA DE NASCIMENTO],
[IDADE],
[SEXO],
[LIMITE DE CREDITO],
[VOLUME DE COMPRA],
[PRIMEIRA COMPRA]) 
VALUES 
(
'19290992743',
'Fernando Cavalcante',
'R. Dois de Fevereiro',
'',
'Água Santa',
'Rio de Janeiro',
'RJ',
'22000000',
'2000-02-12',
18,
'M',
100000,
200000,
1
)



----- AULA 06 - CONSULTANDO OS DADO ----------------

USE [ESQUINA_VENDAS]



CREATE TABLE [TABELA DE CLIENTES](
	[CPF] [VARCHAR](11) ,
	[NOME] [VARCHAR](100) ,
	[ENDERECO] [VARCHAR](150) ,
	[COMPLEMENTO] [VARCHAR](150) ,
	[BAIRRO] [VARCHAR](50) ,
	[CIDADE] [VARCHAR](50) ,
	[ESTADO] [VARCHAR](2) ,
	[CEP] [VARCHAR](8) ,
	[DATA DE NASCIMENTO] [DATE] ,
	[IDADE] [SMALLINT] ,
	[SEXO] [VARCHAR](1) ,
	[LIMITE DE CREDITO] [MONEY] ,
	[VOLUME DE COMPRA] [FLOAT] ,
	[PRIMEIRA COMPRA] [BIT] ,
 	PRIMARY KEY ([CPF])
)


INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('19290992743','Fernando Cavalcante','R. Dois de Fevereiro','','Água Santa','Rio de Janeiro','RJ','22000000','2000-02-12',18,'M',100000,200000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('2600586709','César Teixeira','Rua Conde de Bonfim','','Tijuca','Rio de Janeiro','RJ','22020001','2000-03-12',18,'M',120000,220000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('95939180787','Fábio Carvalho','R. dos Jacarandás da Península','','Barra da Tijuca','Rio de Janeiro','RJ','22002020','1992-01-05',16,'M',90000,180000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('9283760794','Edson Meilelles','R. Pinto de Azevedo','','Cidade Nova','Rio de Janeiro','RJ','22002002','1995-10-07',22,'M',150000,250000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('7771579779','Marcelo Mattos','R. Eduardo Luís Lopes','','Brás','São Paulo','SP','88202912','1992-03-25',25,'M',120000,200000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('5576228758','Petra Oliveira','R. Benício de Abreu','','Lapa','São Paulo','SP','88192029','1995-11-14',22,'F',70000,160000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('8502682733','Valdeci da Silva','R. Srg. Édison de Oliveira','','Jardins','São Paulo','SP','82122020','1995-10-07',22,'M',110000,190000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('1471156710','Érica Carvalho','R. Iriquitia','','Jardins','São Paulo','SP','80012212','1990-09-01',27,'F',170000,245000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('3623344710','Marcos Nougeuira','Av. Pastor Martin Luther King Junior','','Inhauma','Rio de Janeiro','RJ','22002012','1995-01-13',23,'M',110000,220000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('50534475787','Abel Silva ','Rua Humaitá','','Humaitá','Rio de Janeiro','RJ','22000212','1995-09-11',22,'M',170000,260000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('5840119709','Gabriel Araujo','R. Manuel de Oliveira','','Santo Amaro','São Paulo','SP','80010221','1985-03-16',32,'M',140000,210000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('94387575700','Walber Lontra','R. Cel. Almeida','','Piedade','Rio de Janeiro','RJ','22000201','1989-06-20',28,'M',60000,120000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('8719655770','Carlos Eduardo','Av. Gen. Guedes da Fontoura','','Jardins','São Paulo','SP','81192002','1983-12-20',34,'M',200000,240000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('5648641702','Paulo César Mattos','Rua Hélio Beltrão','','Tijuca','Rio de Janeiro','RJ','21002020','1991-08-30',26,'M',120000,220000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('492472718','Eduardo Jorge','R. Volta Grande','','Tijuca','Rio de Janeiro','RJ','22012002','1994-07-19',23,'M',75000,95000,1)



CREATE TABLE [TABELA DE PRODUTOS](
	[CODIGO DO PRODUTO] [VARCHAR](10),
	[NOME DO PRODUTO] [VARCHAR](50),
	[EMBALAGEM] [VARCHAR](20),
	[TAMANHO] [VARCHAR](10),
	[SABOR] [VARCHAR](20),
	[PRECO DE LISTA] [SMALLMONEY],
	PRIMARY KEY ([CODIGO DO PRODUTO])
)


INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1040107','Light - 350 ml - Melancia','Lata','350 ml','Melancia',4.555)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1037797','Clean - 2 Litros - Laranja','PET','2 Litros','Laranja',16.008)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.309)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1004327','Videira do Campo - 1,5 Litros - Melancia','PET','1,5 Litros','Melancia',19.51)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1088126','Linha Citros - 1 Litro - Limão','PET','1 Litro','Limão',7.004)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('544931','Frescor do Verão - 350 ml - Limão','Lata','350 ml','Limão',2.4595)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1078680','Frescor do Verão - 470 ml - Manga','Garrafa','470 ml','Manga',5.1795)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1042712','Linha Citros - 700 ml - Limão','Garrafa','700 ml','Limão',4.904)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('788975','Pedaços de Frutas - 1,5 Litros - Maça','PET','1,5 Litros','Maça',18.011)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1002767','Videira do Campo - 700 ml - Cereja/Maça','Garrafa','700 ml','Cereja/Maça',8.41)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('231776','Festival de Sabores - 700 ml - Açai','Garrafa','700 ml','Açai',13.312)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('479745','Clean - 470 ml - Laranja','Garrafa','470 ml','Laranja',3.768)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1051518','Frescor do Verão - 470 ml - Limão','Garrafa','470 ml','Limão',3.2995)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1101035','Linha Refrescante - 1 Litro - Morango/Limão','PET','1 Litro','Morango/Limão',9.0105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('229900','Pedaços de Frutas - 350 ml - Maça','Lata','350 ml','Maça',4.211)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1086543','Linha Refrescante - 1 Litro - Manga','PET','1 Litro','Manga',11.0105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('695594','Festival de Sabores - 1,5 Litros - Açai','PET','1,5 Litros','Açai',28.512)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('838819','Clean - 1,5 Litros - Laranja','PET','1,5 Litros','Laranja',12.008)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('326779','Linha Refrescante - 1,5 Litros - Manga','PET','1,5 Litros','Manga',16.5105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('520380','Pedaços de Frutas - 1 Litro - Maça','PET','1 Litro','Maça',12.011)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1041119','Linha Citros - 700 ml - Lima/Limão','Garrafa','700 ml','Lima/Limão',4.904)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('243083','Festival de Sabores - 1,5 Litros - Maracujá','PET','1,5 Litros','Maracujá',10.512)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('394479','Sabor da Montanha - 700 ml - Cereja','Garrafa','700 ml','Cereja',8.409)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('746596','Light - 1,5 Litros - Melancia','PET','1,5 Litros','Melancia',19.505)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('773912','Clean - 1 Litro - Laranja','PET','1 Litro','Laranja',8.008)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('826490','Linha Refrescante - 700 ml - Morango/Limão','Garrafa','700 ml','Morango/Limão',6.3105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('723457','Festival de Sabores - 700 ml - Maracujá','Garrafa','700 ml','Maracujá',4.912)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('812829','Clean - 350 ml - Laranja','Lata','350 ml','Laranja',2.808)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('290478','Videira do Campo - 350 ml - Melancia','Lata','350 ml','Melancia',4.56)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('783663','Sabor da Montanha - 700 ml - Morango','Garrafa','700 ml','Morango',7.709)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('235653','Frescor do Verão - 350 ml - Manga','Lata','350 ml','Manga',3.8595)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1002334','Linha Citros - 1 Litro - Lima/Limão','PET','1 Litro','Lima/Limão',7.004)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1013793','Videira do Campo - 2 Litros - Cereja/Maça','PET','2 Litros','Cereja/Maça',24.01)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1096818','Linha Refrescante - 700 ml - Manga','Garrafa','700 ml','Manga',7.7105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1022450','Festival de Sabores - 2 Litros - Açai','PET','2 Litros','Açai',38.012)





CREATE TABLE [TABELA DE VENDEDORES]
( [MATRICULA] [VARCHAR](5),
[NOME] [VARCHAR](100),
[PERCENTUAL COMISSAO] [FLOAT],
[DATA DE ADMISSAO][DATE],
[FERIAS][BIT]
PRIMARY KEY ([MATRICULA])

)


INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00133','Marly dos Santos Gama',0.08,'15/08/2014',0)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00144','Bruno César Brandão',0.05,'15/08/2016',1)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00155','Roberta Serra',0.11,'15/08/2018',0)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00166','Pericles Alves',0.11,'15/08/2019',1)



-- Listando dados de uma tabela

SELECT TOP (5) [CPF]
      ,[NOME]
      ,[ENDERECO]
      ,[COMPLEMENTO]
      ,[BAIRRO]
      ,[CIDADE]
      ,[ESTADO]
      ,[CEP]
      ,[DATA DE NASCIMENTO]
      ,[IDADE]
      ,[SEXO]
      ,[LIMITE DE CREDITO]
      ,[VOLUME DE COMPRA]
      ,[PRIMEIRA COMPRA]
  FROM [ESQUINA_VENDAS].[dbo].[TABELA DE CLIENTES]

  SELECT * FROM [TABELA DE CLIENTES]

  SELECT [CPF],[NOME] FROM [TABELA DE CLIENTES]

  SELECT [CPF] AS 'IDENTIFICADOR', [NOME] AS 'CLIENTE' FROM [TABELA DE CLIENTES]

  SELECT [CPF] AS IDENTIFICADOR, [NOME] AS CLIENTE FROM [TABELA DE CLIENTES]

  SELECT [NOME],[CPF] FROM [TABELA DE CLIENTES]


 SELECT [IDADE] AS 'IDADE DO CLIENTE',[NOME] AS 'CLIENTE',[CIDADE] AS 'MUNICIPIO' FROM [TABELA DE CLIENTES]


 --------------------FILTRANDO REGISTROS---------------------------------------

USE [ESQUINA_VENDAS]

SELECT * FROM [TABELA DE PRODUTOS]



DELETE FROM [TABELA DE PRODUTOS]
WHERE [CODIGO DO PRODUTO] = '1000889'



SELECT * FROM [TABELA DE PRODUTOS]
WHERE [CODIGO DO PRODUTO] = '1000889'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [SABOR] = 'Uva'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [SABOR] = 'Limão'


---------------------- 1 DESAFIO DA AULA 6 --------------------------------------



SELECT [NOME], [MATRICULA] FROM [TABELA DE VENDEDORES]

SELECT [NOME DO PRODUTO] AS 'DESCRIÇÃO DO PRODUTO', [CODIGO DO PRODUTO] AS 'IDENTIFICADOR', [PRECO DE LISTA] AS 'PREÇO A PAGAR'
FROM [TABELA DE PRODUTOS]

SELECT TOP (7) [NOME],[CPF],[CIDADE] FROM [TABELA DE CLIENTES]

---------------------- 2 DESAFIO DA AULA 6 -------------------------------------

SELECT * FROM [TABELA DE VENDEDORES]

SELECT * FROM [TABELA DE VENDEDORES]
WHERE [NOME] = 'Roberta Serra'

SELECT [NOME],[FERIAS] FROM [TABELA DE VENDEDORES]
WHERE [NOME] = 'Roberta Serra'

------------------FILTRANDO REGISTROS MAIOR,MENOR,DIFERENTE----------------------

SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE PRODUTOS]
WHERE EMBALAGEM = 'PET'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [PRECO DE LISTA] = 4.555

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [PRECO DE LISTA] > 10

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [PRECO DE LISTA] < 10

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [PRECO DE LISTA] <= 10

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [PRECO DE LISTA] <= 4.555

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [PRECO DE LISTA] >= 4.555


SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [EMBALAGEM] = 'Lata'


SELECT * FROM [TABELA DE PRODUTOS]
WHERE [EMBALAGEM] > 'Lata'


SELECT * FROM [TABELA DE PRODUTOS]
WHERE [EMBALAGEM] >= 'Lata'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [EMBALAGEM] < 'Lata'


SELECT * FROM [TABELA DE PRODUTOS]
WHERE [EMBALAGEM] <= 'Lata'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [EMBALAGEM] <> 'Lata'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [PRECO DE LISTA] <> 4.555


------------------------- 3 DESAFIO DA AULA 6 -----------------------------------



SELECT * FROM [TABELA DE VENDEDORES] WHERE [PERCENTUAL COMISSAO] > 0.10


-----------------------FILTRANDO POR DATAS----------------------------------------

SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE CLIENTES]
WHERE [DATA DE NASCIMENTO] = '1995-09-11'

SELECT * FROM [TABELA DE CLIENTES]
WHERE [DATA DE NASCIMENTO] >= '1995-09-11'

SELECT * FROM [TABELA DE CLIENTES]
WHERE [DATA DE NASCIMENTO] <= '1995-09-11'

SELECT * FROM [TABELA DE CLIENTES]
WHERE [DATA DE NASCIMENTO] >= '1995-01-01'AND [DATA DE NASCIMENTO]<= '1995-12-31'

SELECT * FROM [TABELA DE CLIENTES]
WHERE YEAR([DATA DE NASCIMENTO]) = 1995

SELECT * FROM [TABELA DE CLIENTES]
WHERE YEAR([DATA DE NASCIMENTO]) < 1995

SELECT * FROM [TABELA DE CLIENTES]
WHERE MONTH([DATA DE NASCIMENTO])=10

SELECT * FROM [TABELA DE CLIENTES]
WHERE DAY([DATA DE NASCIMENTO])=11

SELECT MONTH([DATA DE NASCIMENTO]) AS 'MES' FROM [TABELA DE CLIENTES]
WHERE YEAR ([DATA DE NASCIMENTO]) = 1995

SELECT [NOME] AS 'CLIENTE', MONTH([DATA DE NASCIMENTO]) AS 'MES' FROM [TABELA DE CLIENTES]
WHERE YEAR ([DATA DE NASCIMENTO]) = 1995


------------------------- 4 DESAFIO DA AULA 6 -----------------------------------

SELECT * FROM  [TABELA DE VENDEDORES]
WHERE YEAR ([DATA DE ADMISSAO]) >= 2016

---------------------------TESTE PARA CHAVE ESTRANGEIRA  ------------------------------------------------------
 

CREATE TABLE TESTE
(
    [MATRICULA TESTE][VARCHAR] (10),
    [NOME TESTE][VARCHAR](255),
	[MARCA TESTE][VARCHAR](255),
	PRIMARY KEY ([MATRICULA TESTE]),
    
	[MATRICULA][VARCHAR](5) NOT NULL,
	FOREIGN KEY ([MATRICULA])  REFERENCES [TABELA DE VENDEDORES] ([MATRICULA])
	
)

INSERT INTO [TESTE] ([MATRICULA TESTE],[NOME TESTE],[MARCA TESTE])
VALUES ('0001','TESTE CARRO','TESTE MARCA')

--AQUI FOI TESTADO UM VALOR DE MATRICULA QUE NAO SE ENCONTRA NA TABELA DE VENDEDEDORES (APENAS TESTE)
INSERT INTO [TESTE] ([MATRICULA TESTE],[NOME TESTE],[MARCA TESTE],[MATRICULA])
VALUES ('0001','TESTE CARRO','TESTE MARCA','00199')

--INSERINDO VALORES CORRETOS VINDO DA TABELA DE VENDEDORES    :) (APENAS TESTE)
INSERT INTO [TESTE] ([MATRICULA TESTE],[NOME TESTE],[MARCA TESTE],[MATRICULA])
VALUES ('0001','TESTE CARRO','TESTE MARCA','00166')

-------------------------------- DESAFIO MASTER   PARA CRIAR AS  RELAÇÕES DAS TABELAS DA AULA 6 ----------------------------------------

--CRIANDO A BASE DE DADOS 
CREATE DATABASE [ESQUINA_VENDAS]

USE [ESQUINA_VENDAS]

-- CRIANDO A TABELA DE CLIENTES
CREATE TABLE [TABELA DE CLIENTES] (
	[CPF][VARCHAR] (11),
	[NOME][VARCHAR] (100),
	[ENDERECO][VARCHAR](150),
	[COMPLEMENTO][VARCHAR](150),
	[BAIRRO][VARCHAR](50),
	[CIDADE][VARCHAR](50),
	[ESTADO][VARCHAR](2),
	[CEP][VARCHAR](8),
	[DATA DE NASCIMENTO][DATE],
	[IDADE][SMALLINT],
	[SEXO][VARCHAR](1),
	[LIMITE DE CREDITO][MONEY],
	[VOLUME DE COMPRA][FLOAT],
	[PRIMEIRA COMPRA][BIT],
	PRIMARY KEY ([CPF])
)

--CRIANDO A TABELA DE PRODUTOS
CREATE TABLE [TABELA DE PRODUTOS](
	[CODIGO DO PRODUTO][VARCHAR](10),
	[NOME DO PRODUTO][VARCHAR](50),
	[EMBALAGEM][VARCHAR](20),
	[TAMANHO][VARCHAR](10),
	[SABOR][VARCHAR](20),
	[PRECO DE LISTA][SMALLMONEY],
	PRIMARY KEY ([CODIGO DO PRODUTO])
)

--CRIANDO A TABELA DE VENDEDORES
CREATE TABLE [TABELA DE VENDEDORES](
	[MATRICULA][VARCHAR](5),
	[NOME][VARCHAR](100),
	[PERCENTUAL COMISSAO][FLOAT],
	[DATA DE ADMISSAO][DATE],
	[FERIAS][BIT],
	PRIMARY KEY ([MATRICULA])
)

--CRIANDO TABELA DE NOTAS FISCAIS
CREATE TABLE [TABELA DE NOTAS FISCAIS](
	[CPF][VARCHAR](11) NOT NULL,
	[MATRICULA][VARCHAR](5) NOT NULL,
	[DATA][DATE],
	[NUMERO][VARCHAR](6),
	[IMPOSTO][FLOAT],

	PRIMARY KEY ([NUMERO]),
	FOREIGN KEY ([CPF]) REFERENCES [TABELA DE CLIENTES]([CPF]),
	FOREIGN KEY ([MATRICULA]) REFERENCES [TABELA DE VENDEDORES]([MATRICULA]) 
)

--CRIANDO A TABELA DE ITENS DE NOTAS FISCAIS
CREATE TABLE [TABELA DE ITENS DE NOTAS FISCAIS](
	[NUMERO][VARCHAR](6) NOT NULL,
	[CODIGO DO PRODUTO][VARCHAR](10) NOT NULL,
	[QUANTIDADE][INT],
	[PRECO][FLOAT],

	--CHAVE PRIMARIA COMPOSTA (NAO É DUAS CHAVES PRIMÁRIAS)
	PRIMARY KEY([NUMERO],[CODIGO DO PRODUTO]), --RESTRIÇÃO (CHAVE PRIMARIA COMPOSTA)

	--CONSTRAINT (RESTRIÇÕES)
	FOREIGN KEY ([NUMERO]) REFERENCES [TABELA DE NOTAS FISCAIS] ([NUMERO]),
	FOREIGN KEY ([CODIGO DO PRODUTO]) REFERENCES [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO])
)


------------- USO DO GO --------------

--CRIANDO A BASE DE DADOS 
CREATE DATABASE [ESQUINA_VENDAS]

--SINALIZA O TERMINO DE UM LOTE DE INSTRUCOES
--ELE SINALIZA ATE ONDE DEVE SER PROCESSADO COMO UMA UNICA BATCH (LOTE DE INSTRUCOES)
GO

USE [ESQUINA_VENDAS]
GO

-- CRIANDO A TABELA DE CLIENTES
CREATE TABLE [TABELA DE CLIENTES] (
	[CPF][VARCHAR] (11),
	[NOME][VARCHAR] (100),
	[ENDERECO][VARCHAR](150),
	[COMPLEMENTO][VARCHAR](150),
	[BAIRRO][VARCHAR](50),
	[CIDADE][VARCHAR](50),
	[ESTADO][VARCHAR](2),
	[CEP][VARCHAR](8),
	[DATA DE NASCIMENTO][DATE],
	[IDADE][SMALLINT],
	[SEXO][VARCHAR](1),
	[LIMITE DE CREDITO][MONEY],
	[VOLUME DE COMPRA][FLOAT],
	[PRIMEIRA COMPRA][BIT],
	PRIMARY KEY ([CPF])
)
GO

--CRIANDO A TABELA DE PRODUTOS
CREATE TABLE [TABELA DE PRODUTOS](
	[CODIGO DO PRODUTO][VARCHAR](10),
	[NOME DO PRODUTO][VARCHAR](50),
	[EMBALAGEM][VARCHAR](20),
	[TAMANHO][VARCHAR](10),
	[SABOR][VARCHAR](20),
	[PRECO DE LISTA][SMALLMONEY],
	PRIMARY KEY ([CODIGO DO PRODUTO])
)
GO
--CRIANDO A TABELA DE VENDEDORES
CREATE TABLE [TABELA DE VENDEDORES](
	[MATRICULA][VARCHAR](5),
	[NOME][VARCHAR](100),
	[PERCENTUAL COMISSAO][FLOAT],
	[DATA DE ADMISSAO][DATE],
	[FERIAS][BIT],
	PRIMARY KEY ([MATRICULA])
)
GO

--CRIANDO TABELA DE NOTAS FISCAIS
CREATE TABLE [TABELA DE NOTAS FISCAIS](
	[CPF][VARCHAR](11) NOT NULL,
	[MATRICULA][VARCHAR](5) NOT NULL,
	[DATA][DATE],
	[NUMERO][VARCHAR](6),
	[IMPOSTO][FLOAT],

	PRIMARY KEY ([NUMERO]),
	FOREIGN KEY ([CPF]) REFERENCES [TABELA DE CLIENTES]([CPF]),
	FOREIGN KEY ([MATRICULA]) REFERENCES [TABELA DE VENDEDORES]([MATRICULA]) 
)
GO

--CRIANDO A TABELA DE ITENS DE NOTAS FISCAIS
CREATE TABLE [TABELA DE ITENS DE NOTAS FISCAIS](
	[NUMERO][VARCHAR](6) NOT NULL,
	[CODIGO DO PRODUTO][VARCHAR](10) NOT NULL,
	[QUANTIDADE][INT],
	[PRECO][FLOAT],

	--CHAVE PRIMARIA COMPOSTA (NAO É DUAS CHAVES PRIMÁRIAS)
	PRIMARY KEY([NUMERO],[CODIGO DO PRODUTO]), --RESTRIÇÃO (CHAVE PRIMARIA COMPOSTA)

	--CONSTRAINT (RESTRIÇÕES)
	FOREIGN KEY ([NUMERO]) REFERENCES [TABELA DE NOTAS FISCAIS] ([NUMERO]),
	FOREIGN KEY ([CODIGO DO PRODUTO]) REFERENCES [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO])
)
GO

------------------ USANDO O ALTER TABLE PARA CRIAR CHAVE ESTRANGEIRA------------------

-- CRIANDO UMA TABELA DE TESTE  (UMA CÓPIA DA TABELA DE NOTAS FISCAIS)
--[TABELA DE NOTAS FISCAIS_2] <-- NOME DA TABELA
CREATE TABLE [TABELA DE NOTAS FISCAIS_2]
(
    [CPF] [VARCHAR] (11) NOT NULL,
    [MATRICULA] [VARCHAR](5) NOT NULL,
    [DATA] [DATE],
    [NUMERO][VARCHAR](6),
    [IMPOSTO][FLOAT],
    PRIMARY KEY ([NUMERO])
    	
)
GO


-- ALTERANDO TABELA PARA ADICIONAR CHAVE ESTRANGEIRAS 
ALTER TABLE [dbo].[TABELA DE NOTAS FISCAIS_2]
ADD CONSTRAINT FK_TABELA_DE_NOTAS_FISCAIS_TABELA_DE_CLIENTES FOREIGN KEY ([CPF]) REFERENCES [TABELA DE CLIENTES]([CPF])

-- ALTERANDO TABELA PARA ADICIONAR CHAVE ESTRANGEIRAS 
ALTER TABLE [dbo].[TABELA DE NOTAS FISCAIS_2]
ADD CONSTRAINT FK_TABELA_DE_NOTAS_FISCAIS_TABELA_DE_VENDEDORES FOREIGN KEY ([MATRICULA]) REFERENCES [TABELA DE VENDEDORES]([MATRICULA]) 


----------------------------- AULA 7 - FILTRANDO AS CONSULTAS DE DADOS ---------------------------------
SELECT * FROM [TABELA DE PRODUTOS]


SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Manga' 

--USANDO O OR
SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Manga' OR TAMANHO = '700 ml' --> (V OR V),(F OR V),(V OR F)

--USANDO O AND
SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Manga' AND TAMANHO = '700 ml' --> (V AND V)

--USANDO O NOT COM AND
SELECT * FROM [TABELA DE PRODUTOS]
WHERE NOT(SABOR = 'Manga' AND TAMANHO = '700 ml') --> NOT (V AND V) = F


SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Manga' OR TAMANHO = '700 ml'

--USANDO O NOT COM OR
SELECT * FROM [TABELA DE PRODUTOS]
WHERE NOT(SABOR = 'Manga' OR TAMANHO = '700 ml')

--NOT EM UM CAMPO (TAMANHO)
SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Manga' AND  NOT(TAMANHO = '700 ml')


----- OBSERVACAO (USO DO IN) -----

SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Manga' OR SABOR = 'Laranja'


SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR IN ('Manga','Laranja')


SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR NOT IN ('Manga','Laranja')

--USANDO O NOT COM OR
SELECT * FROM [TABELA DE PRODUTOS]
WHERE NOT(SABOR = 'Manga' OR SABOR = 'Laranja')


SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR IN ('Manga','Laranja') AND [PRECO DE LISTA] > 10


SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR IN ('Manga','Laranja') AND [PRECO DE LISTA] BETWEEN 10 AND 13


SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR IN ('Manga','Laranja') AND [PRECO DE LISTA] >=10 AND [PRECO DE LISTA]<=13


------------------------------ DESAFIO 01  DA AULA 7---------------------------------
SELECT *  FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE [QUANTIDADE] > 60 AND [PREÇO] <= 3



------------------------ USANDO O LIKE --------------------------------------------------

-------------USANDO O LIKE ---------------------
USE ESQUINA_VENDAS

SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] = 'Sabor Montanha - 700 ml - Uva'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] = 'Sabor da Montanha - 700 ml - Uva'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] = 'Videira do Campo - 1,5Litros - Melância'


SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] LIKE '%Litros%'--> '%%%%%%%%LITROS%%%%%%%'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] LIKE '%Litros' --> --> '%%%%%%%%LITROS'


SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] LIKE 'Litros%' --> 'LITROS%%%%%%%'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] LIKE 'Linha%'--> 'Linha%%%%%%%'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] LIKE '%Linha%'

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] LIKE '%Litros%' AND SABOR = 'Laranja'


----Desafio 02 da Aula 07

SELECT * FROM [TABELA DE CLIENTES] WHERE
NOME LIKE '%Mattos'

--------------------------------- FIM da aula 07 ----------------------------------------------------



------------------------ Aula 8  – Mudando a apresentação dos dados de uma consulta ---------------------------------- 


--Usando distinct para visualizar tabela
SELECT * FROM [TABELA DE PRODUTOS]

SELECT EMBALAGEM,TAMANHO FROM [TABELA DE PRODUTOS]

SELECT DISTINCT EMBALAGEM,TAMANHO FROM [TABELA DE PRODUTOS]

SELECT DISTINCT EMBALAGEM,TAMANHO FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Laranja'

SELECT DISTINCT EMBALAGEM,TAMANHO FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Uva'


SELECT DISTINCT EMBALAGEM,TAMANHO,SABOR FROM [TABELA DE PRODUTOS]


-- ------------------------------------- Desafio 01 da aula 08 ---------------------------------------------------

---- DESAFIO 01 DA AULA 08 ------
SELECT * FROM [TABELA DE CLIENTES]

SELECT BAIRRO FROM [TABELA DE CLIENTES]

SELECT DISTINCT BAIRRO,CIDADE FROM [TABELA DE CLIENTES]
WHERE CIDADE = 'Rio de Janeiro'

-------------------------------- Limitando a saída de consulta ---------------------------------------

SELECT * FROM [TABELA DE PRODUTOS]

SELECT TOP 5 * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Laranja'

SELECT TOP 3 * FROM [TABELA DE PRODUTOS]
WHERE SABOR = 'Laranja'

SELECT DISTINCT EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS]

SELECT DISTINCT TOP 2 EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS]


----------------------------- Desafio 02 da Aula 08-------------------------------------------------- 
SELECT TOP 10 * FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '2017-01-01'

SELECT TOP 10 * FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '01/01/2017'


SELECT TOP 10 * FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '01.01.2017'


----------------------------- Ordenando a saída da consulta ----------------------------------------

SELECT * FROM [TABELA DE PRODUTOS]

--O PADRAO DO ORDER BY JA É ASCENDENTE
SELECT * FROM [TABELA DE PRODUTOS]
ORDER BY [PRECO DE LISTA] 

--ASC
SELECT * FROM [TABELA DE PRODUTOS]
ORDER BY [PRECO DE LISTA] ASC

SELECT * FROM [TABELA DE PRODUTOS]
ORDER BY [PRECO DE LISTA] DESC

SELECT * FROM [TABELA DE PRODUTOS]
ORDER BY [NOME DO PRODUTO] 

SELECT * FROM [TABELA DE PRODUTOS]
ORDER BY [NOME DO PRODUTO] DESC

SELECT * FROM  [TABELA DE PRODUTOS]
ORDER BY EMBALAGEM,[NOME DO PRODUTO]


SELECT EMBALAGEM,[NOME DO PRODUTO] FROM  [TABELA DE PRODUTOS]
ORDER BY EMBALAGEM,[NOME DO PRODUTO]


SELECT EMBALAGEM,[NOME DO PRODUTO] FROM  [TABELA DE PRODUTOS]
ORDER BY EMBALAGEM,[NOME DO PRODUTO] DESC

SELECT EMBALAGEM,[NOME DO PRODUTO] FROM  [TABELA DE PRODUTOS]
ORDER BY EMBALAGEM DESC,[NOME DO PRODUTO] DESC


SELECT EMBALAGEM,[NOME DO PRODUTO] FROM  [TABELA DE PRODUTOS]
ORDER BY EMBALAGEM DESC,[NOME DO PRODUTO] ASC



------------------------------- Desafio 03 da Aula 08 ------------------------------------------
-- Primeiro, vamos buscar o código do produto "Linha Refrescante - 1 Litro - Morango/Limão":
SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] = 'Linha Refrescante - 1 Litro - Morango/Limão'

--podemos usar o like para facilitar a busca
SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] LIKE '%Morango/Limão%'
--podemos usar o like para facilitar a busca
SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] LIKE '%Refrescante%'


--resposta
SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE [CODIGO DO PRODUTO] = '1101035'
ORDER BY QUANTIDADE DESC



---------------------------------- Agrupando os resultados ----------------------

SELECT * FROM [TABELA DE CLIENTES]

--APENAS SOMANDO O LIMITE DE CREDITO
SELECT SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES]

SELECT ESTADO,SUM([LIMITE DE CREDITO])  FROM [TABELA DE CLIENTES]
GROUP BY ESTADO

SELECT ESTADO,SUM([LIMITE DE CREDITO]) AS 'SOMA DE LIMITE DE CREDITO'  FROM [TABELA DE CLIENTES]
GROUP BY ESTADO

SELECT ESTADO,AVG([LIMITE DE CREDITO]) AS 'MEDIA DE LIMITE DE CREDITO'  FROM [TABELA DE CLIENTES]
GROUP BY ESTADO
--MAIOR VALOR DO PRECO DE LISTA POR EMBALAGEM ... QUAL SERIA??? ME AJUDEM!!
SELECT * FROM [TABELA DE PRODUTOS]

SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'MAIOR VALOR' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM


SELECT EMBALAGEM,MIN([PRECO DE LISTA]) AS 'MENOR VALOR' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM


SELECT EMBALAGEM,COUNT(*) AS 'CONTAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM

--PRA TESTAR
SELECT EMBALAGEM FROM [TABELA DE PRODUTOS]
WHERE EMBALAGEM= 'PET'
ORDER BY EMBALAGEM

--OBS.:
SELECT [NOME DO PRODUTO],EMBALAGEM, SUM([PRECO DE LISTA]) AS 'SOMA' FROM [TABELA DE PRODUTOS]
GROUP BY [NOME DO PRODUTO],EMBALAGEM


SELECT BAIRRO, SUM([LIMITE DE CREDITO]) AS 'SOMA DE LIMITE DE CREDITO' FROM [TABELA DE CLIENTES]
GROUP BY BAIRRO


SELECT BAIRRO, SUM([LIMITE DE CREDITO]) AS 'SOMA DE LIMITE DE CREDITO' FROM [TABELA DE CLIENTES]
WHERE ESTADO= 'SP'
GROUP BY BAIRRO


SELECT BAIRRO, SUM([LIMITE DE CREDITO]) AS 'SOMA DE LIMITE DE CREDITO' FROM [TABELA DE CLIENTES]
WHERE ESTADO= 'SP'
GROUP BY BAIRRO
ORDER BY BAIRRO DESC

SELECT BAIRRO, SUM([LIMITE DE CREDITO]) AS 'SOMA DE LIMITE DE CREDITO' FROM [TABELA DE CLIENTES]
WHERE ESTADO= 'SP'
GROUP BY BAIRRO


SELECT BAIRRO,ESTADO, SUM([LIMITE DE CREDITO]) AS 'SOMA DE LIMITE DE CREDITO' FROM [TABELA DE CLIENTES]
WHERE ESTADO= 'SP'
GROUP BY BAIRRO,ESTADO



------------- DESAFIO 4 AULA 08 ----

--resposta exercicio anterior
SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE PRODUTOS]
WHERE [NOME DO PRODUTO] LIKE '%Morango%'


SELECT * FROM [TABELA DE PRODUTOS]
WHERE [CODIGO DO PRODUTO] = '1101035' 


SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE [CODIGO DO PRODUTO] = '1101035' 


SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = '100'

--DESAFIO ANTERIOR 
SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE [CODIGO DO PRODUTO] = '1101035'
ORDER BY QUANTIDADE DESC

--DESAFIO ATUAL --> FUNCOES: SUM,MAX,MIN,AVG,COUNT
SELECT [CODIGO DO PRODUTO],COUNT(QUANTIDADE) AS 'QUANTIDADE VENDIDA' FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE [CODIGO DO PRODUTO] = '1101035' AND QUANTIDADE = 99
GROUP BY [CODIGO DO PRODUTO]



-----------------------  Consultas com Having ------------------------------------------------------------

SELECT BAIRRO,ESTADO, SUM([LIMITE DE CREDITO]) AS 'SOMA' FROM [TABELA DE CLIENTES]
WHERE ESTADO= 'SP' 
GROUP BY BAIRRO,ESTADO


SELECT BAIRRO,ESTADO, SUM([LIMITE DE CREDITO]) AS 'SOMA' FROM [TABELA DE CLIENTES]
WHERE ESTADO= 'SP' 
GROUP BY BAIRRO,ESTADO
HAVING SUM([LIMITE DE CREDITO]) >= 140000


------------------ CONTINUANDO COM CONSULTAS COM HAVING (REVISANDO GROUP BY) -----------------------------
SELECT * FROM [TABELA DE CLIENTES]



SELECT BAIRRO,ESTADO,[LIMITE DE CREDITO] FROM [TABELA DE CLIENTES]
WHERE BAIRRO = 'Jardins'


SELECT CPF,NOME,BAIRRO,ESTADO,[LIMITE DE CREDITO] FROM [TABELA DE CLIENTES]
WHERE BAIRRO = 'Jardins'


SELECT BAIRRO,ESTADO,[LIMITE DE CREDITO] FROM [TABELA DE CLIENTES]


SELECT BAIRRO,ESTADO,[LIMITE DE CREDITO] FROM [TABELA DE CLIENTES]
GROUP BY BAIRRO,ESTADO,[LIMITE DE CREDITO]
ORDER BY BAIRRO DESC

--SUM,MAX,MIN,AVG,COUNT
SELECT BAIRRO,ESTADO,SUM([LIMITE DE CREDITO])AS 'SOMA' FROM [TABELA DE CLIENTES]
WHERE ESTADO = 'SP' 
GROUP BY BAIRRO,ESTADO
HAVING SUM([LIMITE DE CREDITO]) > 140000 -- FILTRO DO GROUP BY,--AQUI ESTAMOS FILTRANDO O SUM
ORDER BY BAIRRO ASC


SELECT * FROM [TABELA DE PRODUTOS]

SELECT [NOME DO PRODUTO],EMBALAGEM,[PRECO DE LISTA] FROM [TABELA DE PRODUTOS]
ORDER BY EMBALAGEM

SELECT EMBALAGEM,SUM([PRECO DE LISTA])AS 'SOMA ',MAX ([PRECO DE LISTA]) AS 'MAIOR PRECO',MIN([PRECO DE LISTA])AS 'MENOR PRECO'
FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM
HAVING SUM([PRECO DE LISTA])<=80 AND MAX ([PRECO DE LISTA])>=6


---------------------- RESPOSTA DO DESAFIO DO HAVING PASSO A PASSO  ----------------------------------------------------

-- Quais são os clientes que fizeram mais de 2000 compras em 2016?

SELECT * FROM [TABELA DE CLIENTES]


SELECT * FROM [TABELA DE NOTAS FISCAIS]
--2000 compras??? <--- 
SELECT CPF,COUNT(NUMERO) AS 'QUANTIDADE DE COMPRAS' FROM [TABELA DE NOTAS FISCAIS]
WHERE YEAR(DATA) = '2016' --> INT ---CASTING DE FORMA AUTOMATICO (TRANSFORMACAO DE TIPO DADOS)
GROUP BY CPF
HAVING COUNT(NUMERO) > 2000
ORDER BY COUNT(NUMERO)

-- NAO TENHO COMO RESPONDER TODAS AS INTEGORRACOES 
--RECOMENDACAO:  LEIAM A DOCUMENTACAO DO SQL SERVER NO SITE DA MICROSOFT (ESTUDEM!!),ENG, PT-BR 


SELECT CPF,NOME FROM [TABELA DE CLIENTES]
WHERE CPF IN ('492472718','3623344710','50534475787')




--ABRINDO PARENTESES --> COUNT FAZ UMA  CONTAGEM!!! 
SELECT COUNT(*) AS 'TODOS OS REGESTROS DA TABELA' FROM [TABELA DE NOTAS FISCAIS]


-- RESPOSTA: ----->>>  3 CLIENTES



--------------------------------------- USANDO O CASE PARA CLASSIFICAR RESULTADOS ----------------------------------------

SELECT * FROM [TABELA DE CLIENTES]



-- MUDANDO A APRESENTAÇÃO DA CONSULTA
--TRANZENDO INFORMACAO COM QUALIDADE
SELECT CPF, COUNT(*) AS 'QTD. DE COMPRAS' FROM  [TABELA DE NOTAS FISCAIS]
WHERE YEAR(DATA) = 2016 
GROUP BY CPF 
HAVING COUNT(*) > 2000


--- CLASSIFICAR OS REGISTROS DE VOCES 
--CLASSIFICACAO 
SELECT * FROM [TABELA DE PRODUTOS]
---------------------------------------------------
SELECT [NOME DO PRODUTO],
	CASE
		WHEN [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA]>=7 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO'
	END
FROM [TABELA DE PRODUTOS]
-------------------------------------------------------

SELECT [NOME DO PRODUTO],
	CASE
		WHEN [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA]>=7 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO'
	END AS 'CLASSIFICAO DO PRODUTO'
FROM [TABELA DE PRODUTOS]

-------------------------------------------------------
SELECT [NOME DO PRODUTO],[PRECO DE LISTA],
	CASE
		WHEN [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA]>=7 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO'
	END AS 'CLASSIFICAO DO PRODUTO',AVG([PRECO DE LISTA]) AS 'MEDIA' --FUNCAO DE AGREGACAO
FROM [TABELA DE PRODUTOS]
GROUP BY [NOME DO PRODUTO],[PRECO DE LISTA],
CASE
		WHEN [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA]>=7 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO'
END
---------------------------------------
SELECT [NOME DO PRODUTO],
	CASE
		WHEN [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA]>=7 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO'
	END AS 'CLASSIFICAO DO PRODUTO',AVG([PRECO DE LISTA]) AS 'MEDIA'----FUNCAO DE AGREGACAO
FROM [TABELA DE PRODUTOS]
GROUP BY [NOME DO PRODUTO],
CASE
		WHEN [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA]>=7 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO'
END

--------------------------------------------

--MAIS EXEMPLOS

SELECT [NOME DO PRODUTO],
	CASE
		WHEN [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA]>=7 AND [PRECO DE LISTA]< 12 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO'
	END AS 'CLASSIFICAO DO PRODUTO', -- UM OUTRO CAMPO
	AVG([PRECO DE LISTA]) AS 'MEDIA'----FUNCAO DE AGREGACAO
FROM [TABELA DE PRODUTOS]
GROUP BY [NOME DO PRODUTO],
CASE
		WHEN [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA]>=7 AND [PRECO DE LISTA]< 12 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO'
END
ORDER BY 
CASE
		WHEN [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA]>=7 AND [PRECO DE LISTA]< 12 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO'
END


--- DESAFIO NAO OFICIAL ---
--TIREM A MEDIA POR CLASSIFICAO DE PRODUTO
--QUERO SABER QUANTO É A MEDIA PRA CADA CLASSIFICACAO DO PRODUTO
--ORDENE PELA CLASSIFICACAO DO PRODUTO 

SELECT * FROM [TABELA DE PRODUTOS]

SELECT [NOME DO PRODUTO],EMBALAGEM,[PRECO DE LISTA] FROM [TABELA DE PRODUTOS]
ORDER BY EMBALAGEM

SELECT [NOME DO PRODUTO],EMBALAGEM,AVG([PRECO DE LISTA])AS 'MEDIA' FROM [TABELA DE PRODUTOS]
GROUP BY [NOME DO PRODUTO],EMBALAGEM



SELECT EMBALAGEM,[PRECO DE LISTA] FROM [TABELA DE PRODUTOS]
ORDER BY EMBALAGEM


SELECT EMBALAGEM,AVG([PRECO DE LISTA])AS 'MEDIA' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM


SELECT * FROM [TABELA DE PRODUTOS]

SELECT [NOME DO PRODUTO],EMBALAGEM,[PRECO DE LISTA] FROM [TABELA DE PRODUTOS]


SELECT EMBALAGEM,
	CASE --INICIO DO MEU CASE
		WHEN  [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO' ---1 CONDICAO
		WHEN [PRECO DE LISTA]>=7 AND [PRECO DE LISTA]< 12 THEN 'PRODUTO EM CONTA' --2 CONDICAO
		ELSE 'PRODUTO BARATO' --3 CONDICAO
	END AS 'CLASSIFICAO DO PRODUTO',--FINAL DO MEU CASE 
	AVG([PRECO DE LISTA] ) AS 'MEDIA'
FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM,
CASE --INICIO DO MEU CASE
		WHEN  [PRECO DE LISTA]>=12 THEN 'PRODUTO CARO' ---1 CONDICAO
		WHEN [PRECO DE LISTA]>=7 AND [PRECO DE LISTA]< 12 THEN 'PRODUTO EM CONTA' --2 CONDICAO
		ELSE 'PRODUTO BARATO' --3 CONDICAO
END 


-------------------- DESAFIO 2 DA AULA 09 ----------------------------------------------


SELECT * FROM [TABELA DE CLIENTES]

SELECT NOME,[DATA DE NASCIMENTO] FROM [TABELA DE CLIENTES]

SELECT NOME,YEAR([DATA DE NASCIMENTO]) AS 'ANO DE NASCIMENTO', 
CASE
	WHEN YEAR([DATA DE NASCIMENTO]) < 1990 THEN 'Adulto'
	WHEN YEAR([DATA DE NASCIMENTO]) BETWEEN 1990 AND 1995 THEN 'Jovem'
	ELSE 'Criança'
END AS 'FAIXA ETARIA'
FROM [TABELA DE CLIENTES]
ORDER BY YEAR([DATA DE NASCIMENTO])


SELECT NOME,YEAR([DATA DE NASCIMENTO]) AS 'ANO DE NASCIMENTO', 
CASE
	WHEN YEAR([DATA DE NASCIMENTO]) < 1990 THEN 'Adulto'
	WHEN YEAR([DATA DE NASCIMENTO]) BETWEEN 1990 AND 1995 THEN 'Jovem'
	ELSE 'Criança'
END AS 'FAIXA ETARIA'
FROM [TABELA DE CLIENTES]
ORDER BY 
CASE
	WHEN YEAR([DATA DE NASCIMENTO]) < 1990 THEN 'Adulto'
	WHEN YEAR([DATA DE NASCIMENTO]) BETWEEN 1990 AND 1995 THEN 'Jovem'
	ELSE 'Criança'
END


--------------------------------------------------------

 ------------------INNER JOIN-----------------------------------------------
SELECT * FROM [TABELA DE VENDEDORES]


SELECT * FROM [TABELA DE NOTAS FISCAIS]


SELECT * FROM [TABELA DE VENDEDORES]
INNER JOIN [TABELA DE NOTAS FISCAIS] -- TRAZ O QUE É COMUM ENTRE AS DUAS TABELAS PELO CAMPO ESCOLHIDO
ON [TABELA DE VENDEDORES].MATRICULA = [TABELA DE NOTAS FISCAIS].MATRICULA


SELECT * FROM [TABELA DE VENDEDORES]A
INNER JOIN [TABELA DE NOTAS FISCAIS]B
ON A.MATRICULA = B.MATRICULA


SELECT [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].NOME,[TABELA DE NOTAS FISCAIS].NUMERO,[TABELA DE NOTAS FISCAIS].IMPOSTO FROM [TABELA DE VENDEDORES]
INNER JOIN [TABELA DE NOTAS FISCAIS]
ON [TABELA DE VENDEDORES].MATRICULA = [TABELA DE NOTAS FISCAIS].MATRICULA


SELECT V.MATRICULA,V.NOME,NF.NUMERO,NF.IMPOSTO FROM [TABELA DE VENDEDORES]V
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON V.MATRICULA = NF.MATRICULA



SELECT MATRICULA FROM [TABELA DE VENDEDORES]

SELECT V.MATRICULA FROM [TABELA DE VENDEDORES]V
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON V.MATRICULA = NF.MATRICULA


SELECT DISTINCT V.MATRICULA,V.NOME FROM [TABELA DE VENDEDORES]V
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON V.MATRICULA = NF.MATRICULA


SELECT V.MATRICULA,V.NOME,COUNT(*) AS 'NOTAS POR VENDEDOR' FROM [TABELA DE VENDEDORES]V
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON V.MATRICULA = NF.MATRICULA
GROUP BY V.MATRICULA,V.NOME
ORDER BY COUNT(*)


SELECT V.MATRICULA,V.NOME, YEAR (NF.DATA) AS 'ANO',COUNT(*) AS 'NOTAS POR VENDEDOR' FROM [TABELA DE VENDEDORES]V
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON V.MATRICULA = NF.MATRICULA
GROUP BY V.MATRICULA, V.NOME,YEAR (NF.DATA)
ORDER BY YEAR (NF.DATA)


--SQL PADRONIZADA (ANSI)
SELECT V.MATRICULA,V.NOME, YEAR (NF.DATA) AS 'ANO',COUNT(*) AS 'NOTAS POR VENDEDOR' FROM [TABELA DE VENDEDORES]V -- BUSCAMOS OS REGISTROS NUMA TABELA
INNER JOIN [TABELA DE NOTAS FISCAIS]NF --JUNCAO TABELAS
ON V.MATRICULA = NF.MATRICULA -- CAMPOS PARA JUNCAO
WHERE YEAR (NF.DATA) = 2017 -- FILTRAMOS OS NOSSOS REGISTROS
GROUP BY V.MATRICULA, V.NOME,YEAR (NF.DATA) --AGRUPAMOS OS NOSSOS REGISTROS (COMBINACAO DE CAMPOS)
ORDER BY YEAR (NF.DATA),COUNT(*) -- ORDENAMOS OS NOSSOS REGISTROS

--MOSTRANDO UM POUCO SOBRE A JUNCAO DE TABELAS NA OLD SCHOOL 

-- INNER JOIN 
SELECT * FROM [TABELA DE VENDEDORES]V
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON V.MATRICULA = NF.MATRICULA

-- FORMA ANTIGA DE JUNCAO DE TABELAS
SELECT * FROM [TABELA DE VENDEDORES],[TABELA DE NOTAS FISCAIS]
WHERE [TABELA DE VENDEDORES].MATRICULA = [TABELA DE NOTAS FISCAIS].MATRICULA


--ALGUMAS OPERACOES MATEMATICAS
SELECT (2+2) AS 'ADICAO',(2-1) AS 'SUBTRACAO',(3*5) AS 'MULTIPLICACAO',(9/3) AS 'DIVISAO' 


-------------------- ------DESAFIO 03 DA AULA 09 ---------------------------------------

SELECT * FROM [TABELA DE NOTAS FISCAIS]

--QUANTIDADE * PRECO = FATURAMENTO

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]


SELECT * FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


--QUANTIDADE * PRECO = FATURAMENTO
SELECT INF.[CODIGO DO PRODUTO],NF.DATA,INF.QUANTIDADE,INF.PRECO FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE INF.[CODIGO DO PRODUTO]= '1013793'

SELECT YEAR (NF.DATA) AS 'ANO',INF.QUANTIDADE,INF.PRECO, (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


SELECT YEAR (NF.DATA) AS 'ANO', SUM(INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY YEAR (NF.DATA)
ORDER BY YEAR (NF.DATA)



---------------------------- LEFT JOIN ----------------------------------------------

SELECT * FROM [TABELA DE CLIENTES]
WHERE CPF = '1471156710'

SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '95939180787'


-- JUNCAO INTERNA (TUDO QUE É COMUM ENTRE OS CAMPOS ESCOLHIDOS  ---CPF)
SELECT * FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF --CAMPO CPF (JUNTAMOS AS TABELAS)
WHERE TC.CPF = '1471156710'

SELECT TC.CPF,TC.NOME,NF.CPF FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF --CAMPO CPF (JUNTAMOS AS TABELAS)
WHERE TC.CPF = '1471156710'


-- LEFT JOIN 

--TODOS OS REGISTROS DA TABELA DE CLIENTES 
SELECT * FROM [TABELA DE CLIENTES]

SELECT CPF,NOME FROM [TABELA DE CLIENTES]

SELECT CPF FROM [TABELA DE NOTAS FISCAIS]
--TESTE
SELECT  TC.NOME,COUNT(*) FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
GROUP BY TC.NOME


SELECT TC.NOME, COUNT(*) AS 'QTD DE COMPRAS POR CLIENTE' FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
GROUP BY TC.NOME

-- USANDO O LEFT JOIN (JUNCAO ESQUERDA)
SELECT TC.NOME, COUNT (NF.NUMERO) AS 'QTD DE COMPRAS POR CLIENTE' FROM [TABELA DE CLIENTES]TC 
LEFT JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
GROUP BY TC.NOME

--TESTANDO LEFT JOIN COM RIGTH JOIN
--LEFT JOIN
SELECT TC.NOME, COUNT (NF.NUMERO) AS 'QTD DE COMPRAS POR CLIENTE' FROM [TABELA DE CLIENTES]TC 
LEFT JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
GROUP BY TC.NOME

--RIGHT JOIN
SELECT TC.NOME, COUNT (NF.NUMERO) AS 'QTD DE COMPRAS POR CLIENTE' FROM [TABELA DE NOTAS FISCAIS]NF
RIGHT JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = NF.CPF
GROUP BY TC.NOME
ORDER BY COUNT (NF.NUMERO)


-- FULL E CROSS JOIN

SELECT * FROM [TABELA DE VENDEDORES]

SELECT * FROM [TABELA DE CLIENTES]

SELECT NOME,BAIRRO FROM [TABELA DE VENDEDORES]

SELECT NOME,BAIRRO FROM [TABELA DE CLIENTES]

--PEGANDO OS BAIRROS EM COMUM
SELECT TV.BAIRRO,TV.NOME,TC.BAIRRO,TC.NOME FROM [TABELA DE VENDEDORES]TV
INNER JOIN [TABELA DE CLIENTES]TC
ON TV.BAIRRO = TC.BAIRRO

--LEFT JOIN
SELECT TV.BAIRRO,TV.NOME,TC.BAIRRO,TC.NOME FROM [TABELA DE VENDEDORES]TV
LEFT JOIN [TABELA DE CLIENTES]TC
ON TV.BAIRRO = TC.BAIRRO ---> BAIRROS EM COMUM

--RIGHT JOIN --> PEGAR OS CLIENTES QUE NAO TEM VENDEDORES 
SELECT TV.BAIRRO,TV.NOME,TC.BAIRRO,TC.NOME FROM [TABELA DE VENDEDORES]TV
RIGHT JOIN [TABELA DE CLIENTES]TC
ON TV.BAIRRO = TC.BAIRRO



--FULL JOIN
SELECT TV.BAIRRO,TV.NOME,TC.BAIRRO,TC.NOME FROM [TABELA DE VENDEDORES]TV
FULL JOIN [TABELA DE CLIENTES]TC
ON TV.BAIRRO = TC.BAIRRO



--CROSS JOIN
SELECT TV.BAIRRO,TV.NOME,TC.BAIRRO,TC.NOME FROM [TABELA DE VENDEDORES]TV
CROSS JOIN [TABELA DE CLIENTES]TC
WHERE TV.NOME = 'Márcio Almeida Silva'

------------------------------- UNION --------------------------------------------------------
SELECT DISTINCT BAIRRO AS 'BAIRRO CLIENTE' FROM [TABELA DE CLIENTES]

SELECT DISTINCT BAIRRO 'BAIRRO VENDEDORES' FROM [TABELA DE VENDEDORES]

SELECT BAIRRO FROM [TABELA DE CLIENTES]
UNION
SELECT BAIRRO FROM [TABELA DE VENDEDORES]

SELECT BAIRRO FROM [TABELA DE CLIENTES]
UNION ALL
SELECT BAIRRO FROM [TABELA DE VENDEDORES]


SELECT BAIRRO,[DATA DE NASCIMENTO] FROM [TABELA DE CLIENTES]
UNION ALL
SELECT BAIRRO,NOME FROM [TABELA DE VENDEDORES]

SELECT BAIRRO,NOME,'CLIENTE' FROM [TABELA DE CLIENTES]
UNION ALL
SELECT BAIRRO, NOME,'VENDEDOR' FROM [TABELA DE VENDEDORES]

-- UM POUCO SOBRE CONSTANTES 
SELECT 'TESTE' AS 'COLUNA'

SELECT 4 AS 'TESTE'

SELECT 4+6 AS 'OPERECAO MATEMATICA'

SELECT 'TESTE' AS 'COLUNA', BAIRRO,NOME FROM [TABELA DE CLIENTES]

SELECT BAIRRO,NOME,'CLIENTE' AS 'CLIENTE VENDEDOR' FROM [TABELA DE CLIENTES]
UNION ALL
SELECT BAIRRO, NOME,'VENDEDOR' FROM [TABELA DE VENDEDORES]
ORDER BY 3 DESC



-- 4 QUESTAO  DO FORMS DO DIA 23.08.2021

--Crie uma consulta que mostre o nome do vendedor, o número da nota fiscal, o valor faturado da nota 
--e quanto o vendedor ganhou de comissão para cada nota fiscal.

SELECT * FROM [TABELA DE VENDEDORES]

SELECT MATRICULA,NOME,[PERCENTUAL COMISSAO] FROM [TABELA DE VENDEDORES]


SELECT * FROM [TABELA DE NOTAS FISCAIS]

SELECT MATRICULA,NUMERO FROM [TABELA DE NOTAS FISCAIS]

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT NUMERO,(QUANTIDADE*PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = '100'

SELECT SUM(QUANTIDADE*PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = '100'

SELECT MATRICULA,NUMERO FROM [TABELA DE NOTAS FISCAIS]
WHERE MATRICULA = '00235'

SELECT SUM(QUANTIDADE*PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = '100'

SELECT * FROM [TABELA DE VENDEDORES]TV
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TV.MATRICULA = NF.MATRICULA
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO

SELECT TV.NOME,NF.NUMERO,INF.QUANTIDADE,INF.PRECO,TV.[PERCENTUAL COMISSAO] FROM [TABELA DE VENDEDORES]TV
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TV.MATRICULA = NF.MATRICULA
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


SELECT TV.NOME,NF.NUMERO,(INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO',TV.[PERCENTUAL COMISSAO]*(INF.QUANTIDADE*INF.PRECO) AS 'COMISSAO VENDEDOR' FROM [TABELA DE VENDEDORES]TV
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TV.MATRICULA = NF.MATRICULA
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE NF.NUMERO = '100'



SELECT TV.NOME,NF.NUMERO,SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO',SUM (TV.[PERCENTUAL COMISSAO]*(INF.QUANTIDADE*INF.PRECO)) AS 'COMISSAO VENDEDOR' FROM [TABELA DE VENDEDORES]TV
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TV.MATRICULA = NF.MATRICULA
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY TV.NOME,NF.NUMERO
ORDER BY NF.NUMERO


-- FORMS DO DIA 18.08.2021 - AULA 08 
---NAO VOU ACEITAR INNER JOIN 
--2 - Crie um consulta que traga como resultado a quantidade de vendas no mês de Dezembro de 2015 somente para os clientes do bairro da Tijuca (RJ). *

SELECT CPF,NOME,BAIRRO FROM [TABELA DE CLIENTES]
WHERE BAIRRO = 'Tijuca'


SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '2600586709'


SELECT COUNT (*) FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '2600586709'

SELECT CPF, COUNT (NUMERO) AS 'QUANTIDADE DE VENDAS' FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA BETWEEN '2015-12-01' AND '2015-12-31'
GROUP BY CPF



SELECT CPF,NOME,BAIRRO FROM [TABELA DE CLIENTES]
WHERE BAIRRO = 'Tijuca'



SELECT CPF, COUNT (NUMERO) AS 'QUANTIDADE DE VENDAS' FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF IN('2600586709','492472718','5648641702') AND DATA BETWEEN '2015-12-01' AND '2015-12-31'
GROUP BY CPF




------------- ----------SUBCONSULTAS ---------------------------------
SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE VENDEDORES]


SELECT NOME,BAIRRO FROM [TABELA DE CLIENTES]

-- TABELA DE CONTROLE
SELECT BAIRRO FROM [TABELA DE VENDEDORES]

-- USANDO SUBCONSULTA
SELECT NOME, BAIRRO FROM [TABELA DE CLIENTES]
WHERE BAIRRO IN(SELECT BAIRRO FROM [TABELA DE VENDEDORES])

--NA FORMA MANUAL 
SELECT NOME, BAIRRO FROM [TABELA DE CLIENTES]
WHERE BAIRRO IN('Tijuca','Jardins','Copacabana','Santo Amaro')

SELECT * FROM [TABELA DE PRODUTOS]

SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'VALOR MAXIMO POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM

SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'VALOR MAXIMO POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM
HAVING MAX([PRECO DE LISTA]) <5


SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'VALOR MAXIMO POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM

SELECT * FROM 
(SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'VALOR MAXIMO POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM)A


SELECT A.EMBALAGEM,A.[VALOR MAXIMO POR EMBALAGEM] FROM 
(SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'VALOR MAXIMO POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM)A
WHERE A.[VALOR MAXIMO POR EMBALAGEM] <5


SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'VALOR MAXIMO POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM
HAVING MAX([PRECO DE LISTA]) <5


------------------------------RESPOSTA DO DESAFIO DA AULA 09 ---------------------

SELECT CPF, COUNT(*) AS 'COMPRAS' FROM [TABELA DE NOTAS FISCAIS]
WHERE YEAR(DATA) = 2016
GROUP BY CPF
HAVING COUNT(*) > 2000

SELECT A.CPF,A.COMPRAS FROM 
(SELECT CPF, COUNT(*) AS 'COMPRAS' FROM [TABELA DE NOTAS FISCAIS]
WHERE YEAR(DATA) = 2016
GROUP BY CPF)A --A MINHA COMPLEXIDADE VAI ESTÁ AQUI NA SUBQUERY
WHERE A.COMPRAS > 2000

----------------------- DESAFIO DO FINAL DA AULA ----------------------------

SELECT CPF,NOME,BAIRRO FROM [TABELA DE CLIENTES]
WHERE BAIRRO = 'Tijuca'



SELECT CPF, COUNT (NUMERO) AS 'QUANTIDADE DE VENDAS' FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF IN('2600586709','492472718','5648641702') AND DATA BETWEEN '2015-12-01' AND '2015-12-31'
GROUP BY CPF

--ALUNO: MARCOS
SELECT CPF, COUNT(NUMERO) AS 'QTD DE VENDAS' 
FROM [TABELA DE NOTAS FISCAIS] 
WHERE CPF IN (SELECT CPF FROM [TABELA DE CLIENTES] WHERE BAIRRO = 'Tijuca') AND DATA BETWEEN '2015-12-01' AND '2015-12-31' 
GROUP BY CPF

--ALUNO: EMANUEL SENA
select cpf,count(numero) as 'qtde de vendas' from [TABELA DE NOTAS FISCAIS]
where cpf  in (select cpf from [tabela de clientes] where bairro = 'Tijuca') and data between '2015-12-01' and '2015-12-31'
group by cpf

--ALUNO:LUCAS CARVALHO
SELECT CPF,COUNT(NUMERO) AS 'QUANTIDADE DE VENDAS'
FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF IN (SELECT CPF FROM [TABELA DE CLIENTES]
WHERE BAIRRO = 'TIJUCA') 
AND DATA BETWEEN '2015-12-01' AND '2015-12-31'
GROUP BY CPF

--ALUNO: JONADABE SILVA
SELECT YEAR ([DATA])AS 'VENDAS EM DEZEMBRO DE 2015', CPF,  COUNT (NUMERO) AS 'CLIENTES DO BAIRRO DA TIJUCA' FROM [TABELA DE NOTAS FISCAIS] 
 
WHERE YEAR([DATA]) = 2015 AND MONTH (DATA) = 12 AND CPF  IN (SELECT CPF FROM [TABELA DE CLIENTES] WHERE BAIRRO = 'TIJUCA')  
 
 
GROUP BY YEAR([DATA]),CPF



-----------------------------  VIEW -------------------------------------

SELECT * FROM [TABELA DE PRODUTOS]

SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'PRECO MAX POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM


-- USO DA SUBQUERY (SUBCONSULTA)		
SELECT A.EMBALAGEM,A.[PRECO MAX POR EMBALAGEM] FROM -- DE ONDE VC QUER SELECIONAR (BUSCAR) REGISTROS???
(SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'PRECO MAX POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM)A
WHERE A.[PRECO MAX POR EMBALAGEM]>15


--INICIO DOS EXEMPLOS DE VIEW

SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'PRECO MAX POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM

--CRIANDO VIEW PELO ASSISTENTE
SELECT * FROM VW_EMBALAGENS

		-- DE ONDE VC QUER SELECIONAR (BUSCAR) REGISTROS???
--COM USO DA VIEW
SELECT EMBALAGEM,[PRECO MAX POR EMBALAGEM] FROM VW_EMBALAGENS
WHERE [PRECO MAX POR EMBALAGEM]>15


--SUBQUERY
SELECT A.EMBALAGEM,A.[PRECO MAX POR EMBALAGEM] FROM -- DE ONDE VC QUER SELECIONAR (BUSCAR) REGISTROS???
(SELECT EMBALAGEM,MAX([PRECO DE LISTA]) AS 'PRECO MAX POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM)A
WHERE A.[PRECO MAX POR EMBALAGEM]>15


--SUBSTITUINDO A VIEW NO LUGAR DA SUBQUERY
SELECT A.EMBALAGEM,A.[PRECO MAX POR EMBALAGEM] FROM -- DE ONDE VC QUER SELECIONAR (BUSCAR) REGISTROS???
VW_EMBALAGENS A
WHERE A.[PRECO MAX POR EMBALAGEM]>15


-- CRIACAO POR SQL

SELECT * FROM [TABELA DE NOTAS FISCAIS]
SELECT * FROM [TABELA DE VENDEDORES]
SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT * FROM [TABELA DE VENDEDORES]TV
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TV.MATRICULA = NF.MATRICULA
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO

SELECT TV.NOME,NF.NUMERO, SUM(INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO',
SUM(TV.[PERCENTUAL COMISSAO]*(INF.QUANTIDADE*INF.PRECO)) AS 'COMISSAO VENDEDOR' FROM [TABELA DE VENDEDORES]TV
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TV.MATRICULA = NF.MATRICULA
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY TV.NOME,NF.NUMERO
ORDER BY NF.NUMERO -- OBS. IMPORTANTE ---> 


CREATE VIEW VW_TESTE AS
	SELECT TV.NOME,NF.NUMERO, SUM(INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO',
	SUM(TV.[PERCENTUAL COMISSAO]*(INF.QUANTIDADE*INF.PRECO)) AS 'COMISSAO VENDEDOR' FROM [TABELA DE VENDEDORES]TV
	INNER JOIN [TABELA DE NOTAS FISCAIS]NF
	ON TV.MATRICULA = NF.MATRICULA
	INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
	ON NF.NUMERO = INF.NUMERO
	GROUP BY TV.NOME,NF.NUMERO
	ORDER BY NF.NUMERO -- OBS. IMPORTANTE ---> --- (SORT  -- DUPLO)

--RESOLVENDO O PROBLEMA COM ORDER BY 
CREATE  VIEW VW_TESTE AS
	SELECT TOP 100 TV.NOME,NF.NUMERO, SUM(INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO',
	SUM(TV.[PERCENTUAL COMISSAO]*(INF.QUANTIDADE*INF.PRECO)) AS 'COMISSAO VENDEDOR' FROM [TABELA DE VENDEDORES]TV
	INNER JOIN [TABELA DE NOTAS FISCAIS]NF
	ON TV.MATRICULA = NF.MATRICULA
	INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
	ON NF.NUMERO = INF.NUMERO
	GROUP BY TV.NOME,NF.NUMERO
	ORDER BY NF.NUMERO -- OBS. IMPORTANTE ---> --- (SORT  -- DUPLO)

	SELECT * FROM VW_TESTE

--ALTERANDO UMA VIEW
ALTER VIEW VW_TESTE AS
	
	SELECT  TV.NOME,NF.NUMERO, SUM(INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO',
	SUM(TV.[PERCENTUAL COMISSAO]*(INF.QUANTIDADE*INF.PRECO)) AS 'COMISSAO VENDEDOR' FROM [TABELA DE VENDEDORES]TV
	INNER JOIN [TABELA DE NOTAS FISCAIS]NF
	ON TV.MATRICULA = NF.MATRICULA
	INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
	ON NF.NUMERO = INF.NUMERO
	GROUP BY TV.NOME,NF.NUMERO


SELECT * FROM VW_TESTE

--EXCLUIR A VIEW
DROP VIEW VW_TESTE

--MAIS EXEMPLOS
SELECT * FROM [TABELA DE VENDEDORES]

SELECT NOME,[DATA ADMISSAO] FROM [TABELA DE VENDEDORES]
GO

CREATE VIEW VW_VENDEDORES AS
	SELECT NOME,[DATA ADMISSAO] FROM [TABELA DE VENDEDORES]
GO

--TABELA REAL, EXISTENTE NO DO BANCO DE DADOS
SELECT NOME,[DATA ADMISSAO] FROM [TABELA DE VENDEDORES]

UPDATE [TABELA DE VENDEDORES]
SET [DATA ADMISSAO] = '2019-08-27'
WHERE MATRICULA = '00239'


--TABELA LOGICA 
SELECT * FROM VW_VENDEDORES

SELECT * FROM  [INFORMATION_SCHEMA].[SCHEMATA]




--------------------------------------------- Aula 10 - Funções do SQL Server ----------------------------------


--LTRIM
SELECT '                                     OLA' AS 'CAMPO'
SELECT LTRIM ('                                     OLA') AS 'CAMPO'

--RTRIM
SELECT 'OLA                                                ' AS 'CAMPO'
SELECT RTRIM ('OLA                                                ') AS 'CAMPO'

SELECT '                       OLA                         ' AS 'CAMPO'

SELECT TRIM ('                       OLA                         ' ) AS 'CAMPO'

SELECT  ('                       OLA                      .!?' ) AS 'CAMPO'


SELECT  TRIM('                       OLA                      .!?' ) AS 'CAMPO'
				--DE ONDE?
SELECT TRIM (' .!?' FROM '                       OLA                      .!?' ) AS 'CAMPO'


SELECT '                  MARCIO*LADISLAU                  ' AS 'CAMPO'
--TRIM
SELECT TRIM (' *' FROM '                  MARCIO*LADISLAU                  ') AS 'CAMPO'

--REPLACE
SELECT REPLACE('MARCIO*LADISLAU','*',' ') AS 'CAMPO'

SELECT REPLACE('MARCIO*LADISLAU','*','-') AS 'CAMPO'

--FUNCAO DENTRO DE FUNCAO 
SELECT REPLACE (TRIM (' *' FROM '                  MARCIO*LADISLAU                  '),'*',' ') AS 'CAMPO'

--CONCAT
SELECT CONCAT('OLA',' ','MUNDO') AS 'CAMPO'

SELECT 'OLA ' + 'MUNDO' AS 'CAMPO'

--LEFT
SELECT LEFT ('AVENIDA EDUARDO RIBEIRO',7) AS 'CAMPO'

--RIGHT
SELECT RIGHT ('AVENIDA EDUARDO RIBEIRO',7) AS 'CAMPO'

--UPPER
SELECT UPPER ('marcio ladislau') AS 'CAMPO'

--LOWER
SELECT LOWER ('MARCIO LADISLAU') AS 'CAMPO'

--REPLACE 
SELECT REPLACE ('AVENIDA EDUARDO RIBEIRO','AVENIDA','RUA') AS 'CAMPO'


--SUBSTRING
SELECT SUBSTRING ('AVENIDA EDUARDO RIBEIRO',1,2) AS 'CAMPO'

SELECT SUBSTRING ('AVENIDA EDUARDO RIBEIRO',1,7) AS 'CAMPO'


--LEN 
SELECT LEN ('MARCIO LADISLAU') AS 'CAMPO'


--TESTANDO DA TABELA
SELECT * FROM [TABELA DE CLIENTES]

SELECT CONCAT(NOME,' ',CPF) AS 'NOME' FROM [TABELA DE CLIENTES] 


SELECT CONCAT(NOME,' (',CPF,')') AS 'NOME',BAIRRO,[DATA DE NASCIMENTO] FROM [TABELA DE CLIENTES]


---------------FUNÇOES DE DATA ------------------------------------------------

--DATA COM HORA E MINUTO E SEGUNDOS 
SELECT SYSDATETIME()

--COM FUSO HORARIO DA INGLATERRA 
SELECT SYSDATETIMEOFFSET()

--FUSO HORARIO DA INGLATERRA (GREENWICH)
SELECT SYSUTCDATETIME()

--DATA E HORA SEM MUITA PRECISAO
SELECT CURRENT_TIMESTAMP

--DATA E HORA SEM MUITA PRECISAO
SELECT GETDATE()

--FUSO HORARIO DA INGLATERRA 
SELECT GETUTCDATE()

--USO DE ALGUMAS OUTRAS FUNCOES
SELECT GETDATE()

SELECT DATENAME(YEAR,GETDATE())

SELECT DATENAME(MICROSECOND,GETDATE())

SELECT DATENAME(SECOND,GETDATE())

SELECT DATENAME(MINUTE,GETDATE())

SELECT DATENAME(HOUR,GETDATE())

SELECT DATENAME(DAY,GETDATE())

SELECT DATENAME(WEEKDAY,GETDATE())

SELECT DATENAME(DAYOFYEAR,GETDATE())

SELECT DATENAME(MONTH,GETDATE())

SELECT DATEPART(MONTH,GETDATE())

SELECT DATEPART(YEAR,GETDATE())

SELECT DATEPART(MONTH,'2018-11-03') AS 'MES'

SELECT DATEPART(YEAR,'2018-11-03') AS 'ANO'

SELECT DAY(GETDATE())

SELECT MONTH(GETDATE())

SELECT YEAR(GETDATE())

SELECT DATEFROMPARTS(2021,08,31)

SELECT DATENAME (MONTH,DATEFROMPARTS(2021,07,31))

SELECT DATEDIFF(YEAR,'2017-08-31',GETDATE())

SELECT DATEDIFF(MONTH,'2017-08-31',GETDATE())

SELECT DATEDIFF(DAY,'2017-08-31',GETDATE())

SELECT DATEDIFF(YEAR,DATEFROMPARTS(2015,4,14),GETDATE())


SELECT DATEADD (DAY,15,GETDATE())

SELECT DATEADD (MONTH,4,GETDATE())


SELECT ISDATE ('2021-08-31')

SELECT ISDATE ('2021-35-50')




----------------- DESAFIO 02 DA AULA  --------------------


--Crie uma consulta que mostre o nome e a idade dos clientes

--VAMOS REALIZAR UMA CONSULTA COM AS IDADES ATUAIS DOS CLIENTES 

SELECT * FROM [TABELA DE CLIENTES]

SELECT NOME,[DATA DE NASCIMENTO],IDADE AS 'IDADE ANTERIOR',DATEDIFF(YEAR,[DATA DE NASCIMENTO],GETDATE()) AS 'IDADE ATUAL' 
FROM [TABELA DE CLIENTES]


--------------------- FUNCOES MATEMATICAS-----------------------------------------
SELECT (6+2*4+6)

SELECT ((6+2)*(4+6))

SELECT POWER(2,15) --> 2*2*2

SELECT (2-6)

SELECT ABS(2-6)

SELECT SQRT(144)

SELECT CEILING(7.3333223)

SELECT FLOOR (7.3333223)

SELECT RAND()


SELECT 2 * RAND()


--FORMULA PARA GERAR NUMEROS ALEATORIOS 
SELECT (NUMERO FINAL - NUMERO INICIAL) * RAND() + NUMERO INICIAL

--NUMERO INICIAL = 5
--NUMERO FINAL = 10
SELECT (10-5)*RAND() + 5


--NUMERO INICIAL = 1
--NUMERO FINAL = 100
SELECT (100-1)*RAND() + 1

SELECT ROUND (7.3333223,2)


SELECT ROUND ((100-1)*RAND() + 1,0)

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT QUANTIDADE,PRECO,(QUANTIDADE*PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]


SELECT QUANTIDADE,PRECO,ROUND((QUANTIDADE*PRECO),2) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]


-- DESAFIO 03  DA AULA 10 ---------------------

-- RESPOSTA DO DESAFIO 03 DA AULA 10 ----
SELECT * FROM [TABELA DE NOTAS FISCAIS]

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT * FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO



SELECT NF.DATA,(INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR (NF.DATA) = 2016


SELECT NF.DATA, SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR (NF.DATA) = 2016
GROUP BY NF.DATA
ORDER BY NF.DATA


SELECT YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA)


SELECT YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA)

SELECT YEAR (NF.DATA) AS 'ANO', SUM (NF.IMPOSTO * (INF.QUANTIDADE*INF.PRECO)) AS 'IMPOSTO PAGO' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA)


SELECT YEAR (NF.DATA) AS 'ANO', FLOOR(SUM (NF.IMPOSTO * (INF.QUANTIDADE*INF.PRECO))) AS 'IMPOSTO PAGO' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA)

--------------------- CONVERSÃO DE DADOS --------------------------------------------
SELECT GETDATE()


SELECT CONVERT (VARCHAR,GETDATE(),101)

SELECT CONVERT (VARCHAR,GETDATE(),1)

SELECT CONVERT (VARCHAR,GETDATE(),102)

SELECT CONVERT (VARCHAR,GETDATE(),2)

SELECT CONVERT (VARCHAR,GETDATE(),103)

SELECT CONVERT (VARCHAR,GETDATE(),3)

SELECT CONVERT (VARCHAR,GETDATE(),106)

SELECT CONVERT (VARCHAR,GETDATE(),104)

SELECT CONVERT (VARCHAR,GETDATE(),105)

SELECT CONVERT (VARCHAR,GETDATE(),113)


SELECT CONVERT (VARCHAR,GETDATE(),23)

SELECT CONVERT (VARCHAR,GETDATE(),130)

SELECT 193.57123

SELECT CONVERT (DECIMAL(5,2),193.57123)


--
CREATE TABLE TESTE(
NUMERO DECIMAL (5,2),
NOME VARCHAR (30)
)


DROP TABLE TESTE
SELECT * FROM TESTE

INSERT INTO TESTE (NUMERO,NOME)
VALUES (2344418.122257,'MARCIO')


SELECT 18.53 AS 'NUMERO', CAST(18.53 AS INT) AS 'INTEIRO', CAST (18.53 AS DECIMAL(6,1)) AS 'DECIMAL'

--EXEMPLOS NO BANCO 
SELECT * FROM [TABELA DE PRODUTOS]

SELECT 'O preço do produto ' + [NOME DO PRODUTO] + ' é ' + [PRECO DE LISTA] FROM [TABELA DE PRODUTOS]

SELECT 'O preço do produto ' + [NOME DO PRODUTO] + ' é ' + CONVERT(VARCHAR,[PRECO DE LISTA]) FROM [TABELA DE PRODUTOS]

SELECT 'O preço do produto ' + [NOME DO PRODUTO] + ' é ' + CAST ([PRECO DE LISTA] AS VARCHAR) FROM [TABELA DE PRODUTOS]

SELECT [CODIGO DO PRODUTO],CONCAT('PRECO DE LISTA: ',[PRECO DE LISTA]) FROM [TABELA DE PRODUTOS]

SELECT [CODIGO DO PRODUTO],CONCAT('PRECO DE LISTA: ',CONVERT (VARCHAR,[PRECO DE LISTA])) FROM [TABELA DE PRODUTOS]

SELECT 'DATA DA NOTA: ' + DATA FROM [TABELA DE NOTAS FISCAIS]

SELECT 'DATA DA NOTA: ' + CONVERT (VARCHAR,DATA) FROM [TABELA DE NOTAS FISCAIS]

SELECT CONCAT ('DATA DA NOTA',DATA) FROM [TABELA DE NOTAS FISCAIS]




--RESPOSTA DO DESAFIO 04 DA AULA 10 -------
--Queremos construir um SQL cujo resultado seja, para cada cliente: "O cliente João da Silva faturou 120000 no ano de 2016".
--Somente para o ano de 2016.

SELECT NOME FROM [TABELA DE CLIENTES]

SELECT QUANTIDADE*PRECO FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT YEAR (DATA) FROM [TABELA DE NOTAS FISCAIS]
WHERE YEAR (DATA) = 2016


SELECT * FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE CLIENTES]TC
ON NF.CPF = TC.CPF



SELECT CONCAT('O cliente ',TC.NOME,' faturou ', 
(INF.QUANTIDADE*INF.PRECO), --FATURAMENTO
' no ano de ', 
YEAR(NF.DATA) ) 
FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE CLIENTES]TC
ON NF.CPF = TC.CPF
WHERE YEAR(NF.DATA) = 2016


SELECT CONCAT('O cliente ',TC.NOME,' faturou ', 
CONVERT (VARCHAR,CONVERT(DECIMAL(15,2),SUM (INF.QUANTIDADE*INF.PRECO))), --FATURAMENTO
' no ano de ', 
YEAR(NF.DATA) ) 
FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE CLIENTES]TC
ON NF.CPF = TC.CPF
WHERE YEAR(NF.DATA) = 2016
GROUP BY TC.NOME,YEAR(NF.DATA)



-------------- AULA 11 - RELATORIOS ----------------- 
--RELATORIO DE VENDAS VALIDAS

--PASSO 01: SELECIONAR AS TABELAS 
SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT * FROM [TABELA DE NOTAS FISCAIS]

--PASSO 02: FAZER A UNIAO DAS TABELAS QUE TEM OS CAMPOS QUE QUEREMOS
SELECT * FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO

--PASSO 03: PEGAR SOMENTE OS CAMPOS QUE QUEREMOS
SELECT NF.CPF,NF.DATA,INF.QUANTIDADE FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO

--PASSO 04: CONVERTENDO A DATA PARA STRING
SELECT NF.CPF,CONVERT (VARCHAR,NF.DATA) AS 'DATA',INF.QUANTIDADE FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO

--PASSO 5: USAR A FUNCAO SUBSTRING PARA PEGAR SOMENTE ANO/MES
SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES',INF.QUANTIDADE FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO

--PASSO 6: AGRUPAR A QUANTIDADE POR CPF E ANO/MES
SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7)

--PASSO 7: PEGAR O NOME E O VOLUME DE COMPRA DA TABELA DE CLIENTES
SELECT TC.NOME,TC.[VOLUME DE COMPRA]  FROM [TABELA DE CLIENTES]TC

--PASSO 8: FAZER UMA SUBQUERY DA CONSULTA DO PASSO 6
SELECT * FROM 
(SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7))CQ --> CONSULTA QUANTIDADE (SUBCONSULTA)[SUBQUERY]

--TESTE DO PASSO 8
SELECT CQ.CPF,CQ.[ANO/MES] FROM 
(SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7))CQ --> CONSULTA QUANTIDADE (SUBCONSULTA)[SUBQUERY]

--PASSO 9: APLICAR O INNER JOIN COM A TABELA DE CLIENTES
SELECT * FROM 
(SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7))CQ --> CONSULTA QUANTIDADE (SUBCONSULTA)[SUBQUERY]
INNER JOIN [TABELA DE CLIENTES]TC
ON CQ.CPF = TC.CPF

--PASSO 10:SELECIONARSOMENTE AS COLUNAS NECESSARIAS
SELECT TC.NOME,CQ.[ANO/MES],CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA] FROM 
(SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7))CQ --> CONSULTA QUANTIDADE (SUBCONSULTA)[SUBQUERY]
INNER JOIN [TABELA DE CLIENTES]TC
ON CQ.CPF = TC.CPF

--PASSO 11:TRANFORMAR A CONSULTA DO PASSO 10 EM SUBCONSULTA (SUBQUERY)
SELECT * FROM
(SELECT TC.NOME,CQ.[ANO/MES],CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA] FROM 
(SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7))CQ --> CONSULTA QUANTIDADE (SUBCONSULTA)[SUBQUERY]
INNER JOIN [TABELA DE CLIENTES]TC
ON CQ.CPF = TC.CPF)AUX

--TESTE DO PASSO 11
SELECT AUX.NOME,AUX.[VOLUME DE COMPRA] FROM
(SELECT TC.NOME,CQ.[ANO/MES],CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA] FROM 
(SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7))CQ --> CONSULTA QUANTIDADE (SUBCONSULTA)[SUBQUERY]
INNER JOIN [TABELA DE CLIENTES]TC
ON CQ.CPF = TC.CPF)AUX

--PASSO 12: PEGAR SOMENTE OS CAMPOS QUE QUEREMOS E ACRESCENTAR O CASE NO SELECT 
SELECT AUX.NOME,AUX.[ANO/MES],AUX.[QUANTIDADE MES],AUX.[VOLUME DE COMPRA],
CASE
	WHEN AUX.[QUANTIDADE MES] <= AUX.[VOLUME DE COMPRA] THEN 'VENDA VÁLIDA'
	ELSE 'VENDA INVALIDA'
END AS 'STATUS VENDA'

FROM
(SELECT TC.NOME,CQ.[ANO/MES],CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA] FROM 
(SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7))CQ --> CONSULTA QUANTIDADE (SUBCONSULTA)[SUBQUERY]
INNER JOIN [TABELA DE CLIENTES]TC
ON CQ.CPF = TC.CPF)AUX

--PASSO 13: ORDENAR OS REGISTROS 
SELECT AUX.NOME,AUX.[ANO/MES],AUX.[QUANTIDADE MES],AUX.[VOLUME DE COMPRA],
CASE
	WHEN AUX.[QUANTIDADE MES] <= AUX.[VOLUME DE COMPRA] THEN 'VENDA VÁLIDA'
	ELSE 'VENDA INVALIDA'
END AS 'STATUS VENDA'

FROM
(SELECT TC.NOME,CQ.[ANO/MES],CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA] FROM 
(SELECT NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF,SUBSTRING (CONVERT (VARCHAR,NF.DATA),1,7))CQ --> CONSULTA QUANTIDADE (SUBCONSULTA)[SUBQUERY]
INNER JOIN [TABELA DE CLIENTES]TC
ON CQ.CPF = TC.CPF)AUX
ORDER BY AUX.NOME,AUX.[ANO/MES]




-- RELATORIO 02 - VENDAS PERCENTUAL POR SABOR --

--PASSO 1: SELECIONANDO AS TABELAS DO RELATORIO QUE IREMOS USAR (VERIFICANDO AS TABELAS)
SELECT * FROM [TABELA DE PRODUTOS]TP

SELECT * FROM [TABELA DE NOTAS FISCAIS]NF

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]INF

--PASSO 2: PEGAR OS CAMPO DE CADA TABELA QUE IREMOS USAR
SELECT TP.SABOR FROM [TABELA DE PRODUTOS]TP

SELECT NF.DATA FROM [TABELA DE NOTAS FISCAIS]NF

SELECT (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF

--PASSO 3: JUNTAS AS TABELAS E PEGANDO OS CAMPOS NECESSARIOS 
SELECT TP.SABOR,NF.DATA,(INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]

--PASSO 4: FILTRANDO PELA DATA E DANDO NOME AS COLUNAS
SELECT TP.SABOR,YEAR (NF.DATA) AS 'ANO',(INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016 

--TESTE DO PASSO 4: 
SELECT TP.SABOR,YEAR (NF.DATA) AS 'ANO',(INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016 AND SABOR = 'Açai'


--PASSO 5: AGRUPANDO 
SELECT TP.SABOR,YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR,YEAR (NF.DATA) 

-- PASSO 6: PEGANDO O FATURAMENTO TOTAL
SELECT YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA)

--PASSO 7: INNER JOIN NAS DUAS CONSULTAS 
SELECT * FROM 
(SELECT TP.SABOR,YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR,YEAR (NF.DATA) )AUX1

INNER JOIN

(SELECT YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO

--PASSO 8: VAMOS PEGAR OS CAMPOS DE NOSSAS SUBCONSULTAS

SELECT AUX1.SABOR,AUX1.ANO,AUX1.FATURAMENTO,AUX2.[FATURAMENTO ANUAL] FROM 
(SELECT TP.SABOR,YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR,YEAR (NF.DATA) )AUX1

INNER JOIN

(SELECT YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO

--PASSO 9: CRIAR O PERCENTUAL
SELECT AUX1.SABOR,AUX1.ANO,AUX1.FATURAMENTO,(AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100 AS 'PARTICIPACAO' FROM 
(SELECT TP.SABOR,YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR,YEAR (NF.DATA) )AUX1

INNER JOIN

(SELECT YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO

--PASSO 10: ORDENAR PELO FATURAMENTO DESCENDENTE 
SELECT AUX1.SABOR,AUX1.ANO,AUX1.FATURAMENTO,(AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100 AS 'PARTICIPACAO' FROM 
(SELECT TP.SABOR,YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR,YEAR (NF.DATA) )AUX1

INNER JOIN

(SELECT YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC


--PASSO 11: CONVERTER E ARRENDONDAR CAMPOS 
SELECT AUX1.SABOR,AUX1.ANO,FORMAT (AUX1.FATURAMENTO,'C','PT-BR') AS 'FATURAMENTO',CONVERT (VARCHAR,ROUND ((AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100,2))+'%' AS 'PARTICIPACAO' FROM 
(SELECT TP.SABOR,YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR,YEAR (NF.DATA) )AUX1

INNER JOIN

(SELECT YEAR (NF.DATA) AS 'ANO',SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC


----------------------- AULA 16 - --------------------------------

--EXEMPLO 01 - VOLTANDO COM O ROLLBACK ------

SELECT * FROM [TABELA DE VENDEDORES]

BEGIN TRANSACTION 

UPDATE [TABELA DE VENDEDORES]
SET [PERCENTUAL COMISSAO] = [PERCENTUAL COMISSAO]*1.15


ROLLBACK

----- EXEMPLO 2 - CONFIRMANDO COM O COMMIT -----
BEGIN TRANSACTION

UPDATE [TABELA DE VENDEDORES]
SET [PERCENTUAL COMISSAO] = 1.15
WHERE MATRICULA = '00239'

SELECT * FROM [TABELA DE VENDEDORES]

COMMIT

------------- EXEMPLO 3 ----------------
BEGIN TRANSACTION

SELECT * FROM [TABELA DE CLIENTES]

DELETE FROM [TABELA DE CLIENTES]

DELETE FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

ROLLBACK


---- AUTO INCREMENTO ----

CREATE TABLE TESTE(
	ID INT IDENTITY (1,1) NOT NULL,
	NOME VARCHAR(30) NOT NULL,

)

SELECT * FROM TESTE

INSERT INTO TESTE (NOME) VALUES ('Roberto Silva')
INSERT INTO TESTE (NOME) VALUES  ('André Luiz')
INSERT INTO TESTE (NOME) VALUES ('Jéssica Santos')

DELETE FROM TESTE
WHERE ID = 1


----------- EXEMPLO 2 ---------
CREATE TABLE TESTE_2 (
	ID INT IDENTITY (50,5) NOT NULL,
	NOME VARCHAR (30) NOT NULL
)


INSERT INTO TESTE_2 (NOME) VALUES ('Roberto Silva')
INSERT INTO TESTE_2 (NOME) VALUES  ('André Luiz')
INSERT INTO TESTE_2 (NOME) VALUES ('Jéssica Santos')


SELECT * FROM TESTE_2

------EXEMPLO 3 --------
CREATE TABLE TESTE_3 (
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR (30) NOT NULL
)

INSERT INTO TESTE_3 (NOME) VALUES ('Roberto Silva')
INSERT INTO TESTE_3 (NOME) VALUES  ('André Luiz')
INSERT INTO TESTE_3 (NOME) VALUES ('Jéssica Santos')

SELECT * FROM TESTE_3



------CAMPOS PADROES ------
CREATE TABLE TAB_PADRAO (
	ID INT IDENTITY (1,1) NOT NULL,
	DESCRICAO VARCHAR (20) NULL, --DESCRITOR
	ENDERECO VARCHAR(200) NOT NULL,
	CIDADE VARCHAR (30) DEFAULT 'Cidade não definida',
	DATA_CRIACAO DATE DEFAULT GETDATE ()
)

SELECT * FROM TAB_PADRAO

INSERT INTO TAB_PADRAO (DESCRICAO,ENDERECO,CIDADE,DATA_CRIACAO) 
VALUES('João da Silva','Rua 2','Rio de Janeiro','2017-09-15')

INSERT INTO TAB_PADRAO (DESCRICAO,ENDERECO) 
VALUES('Klécio Lira','Rua 7')

SELECT * FROM TAB_PADRAO



------------------------- TRIGGER ------------------------------------------------------------

-------- EXEMPLO TRIGGER ------
CREATE TABLE VENDAS_DIARIAS (
	DATA_VENDA DATE,
	TOTAL_VENDA FLOAT
)
GO

CREATE TRIGGER TG_VENDAS_DIARIAS
ON [TABELA DE ITENS NOTAS FISCAIS]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DELETE FROM VENDAS_DIARIAS
	INSERT INTO VENDAS_DIARIAS(DATA_VENDA,TOTAL_VENDA)
	
	SELECT NF.DATA,SUM (INF.QUANTIDADE * INF.PRECO) AS 'TOTAL VENDA' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
	INNER JOIN [TABELA DE NOTAS FISCAIS]NF
	ON INF.NUMERO = NF.NUMERO
	GROUP BY NF.DATA
	ORDER BY NF.DATA DESC
	
END
GO

-- TESTANDO GATILHO TG_VENDAS_DIARIAS -----


--VERIFICANDO A ULTIMA NOTA NA TABELA DE NOTAS FISCAIS
SELECT MAX(NUMERO) FROM [TABELA DE NOTAS FISCAIS]

--INS. TABELA DE NOTAS FISCAIS (CRIANDO NOTA: 87977) 
INSERT INTO [TABELA DE NOTAS FISCAIS] (NUMERO,DATA,CPF,MATRICULA,IMPOSTO)
VALUES ('87977','2021-09-15','1471156710','00235',0.25)


--INS. TABELA DE NOTAS FISCAIS (CRIANDO NOTA: 87978) 
INSERT INTO [TABELA DE NOTAS FISCAIS] (NUMERO,DATA,CPF,MATRICULA,IMPOSTO)
VALUES ('87978','2021-09-16','1471156710','00235',0.25)

--INS. TABELA DE NOTAS FISCAIS (CRIANDO NOTA: 87979) 
INSERT INTO [TABELA DE NOTAS FISCAIS] (NUMERO,DATA,CPF,MATRICULA,IMPOSTO)
VALUES ('87979','2021-09-16','1471156710','00235',0.25)


--INSERINDO REGISTROS NA TABELA DE ITENS DE NOTAS FISCAIS (NOTA: 87977)
INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO],QUANTIDADE,PRECO)
VALUES ('87977','1000889',100,1)

--INSERINDO REGISTROS NA TABELA DE ITENS DE NOTAS FISCAIS (NOTA: 87977)
INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO],QUANTIDADE,PRECO)
VALUES ('87977','1002334',500,1)

--INSERINDO REGISTROS NA TABELA DE ITENS DE NOTAS FISCAIS (NOTA: 87978)
INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO],QUANTIDADE,PRECO)
VALUES ('87978','1002767',50,2)


--INSERINDO REGISTROS NA TABELA DE ITENS DE NOTAS FISCAIS (NOTA: 87978)
INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO],QUANTIDADE,PRECO)
VALUES ('87979','1004327',200,3)


--VERIFICANDO NA TABELA VENDAS_DIARIAS
SELECT * FROM VENDAS_DIARIAS
WHERE YEAR (DATA_VENDA) = 2021

--VERIFICANDO ITENS NA TABELA DE ITENS DE NOTAS FISCAIS
SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = '87977'

--TIRANDO UM ITEM DA NOTA FISCAL (NOTA: 87977)
DELETE FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = '87977' AND [CODIGO DO PRODUTO]='1002334'


UPDATE [TABELA DE ITENS NOTAS FISCAIS]
SET QUANTIDADE = 200
WHERE NUMERO = '87977'






--CONTINUAMOS AMANHA

--INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO])
--VALUES ('87977','2021-09-15','1471156710','00235',0.25)


---- RESPOSTA DO DESAFIO 16 ------
SELECT * FROM [TABELA DE CLIENTES]


--VERIFICANDO  A IDADE ATUAL SE ESTÁ CORRETA
SELECT CPF,IDADE,[DATA DE NASCIMENTO], DATEDIFF(YEAR,[DATA DE NASCIMENTO],GETDATE()) AS 'IDADE ATUAL' 
FROM [TABELA DE CLIENTES]
GO

CREATE TRIGGER  TG_CLIENTES_IDADE 
ON [TABELA DE CLIENTES]
AFTER INSERT, UPDATE, DELETE 
AS
BEGIN
	UPDATE [TABELA DE CLIENTES]
	SET IDADE = DATEDIFF (YEAR,[DATA DE NASCIMENTO],GETDATE())
END
GO
--TESTANDO O DESAFIO

INSERT INTO [TABELA DE CLIENTES](CPF,NOME,ENDERECO,COMPLEMENTO,BAIRRO,CIDADE,ESTADO,CEP,[DATA DE NASCIMENTO],IDADE,
SEXO,[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA])
VALUES ('5073366233','Jesuan Henrique','Rua das Margaridas','','Cidade Nova I','Manaus','AM','6900000','2001-01-01',1,'M',
120000,23000,1)


UPDATE [TABELA DE CLIENTES]
SET IDADE = 500
WHERE CPF = '5073366233'

DELETE FROM [TABELA DE CLIENTES]
WHERE CPF =  '5073366233'


-------- USANDO O CHECK -----

CREATE TABLE CLIENTE_TESTE(
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR (20),
	IDADE INT,
	CIDADE VARCHAR(20),
	
	CHECK (IDADE >= 18)

)


INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('FRED',19,'Rio de Janeiro')


SELECT * FROM CLIENTE_TESTE

INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('PEDRO',17,'São Paulo')


INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('ALINE',20,'São Paulo')


DROP TABLE CLIENTE_TESTE
GO

---****************************************---
CREATE TABLE CLIENTE_TESTE (
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR (20),
	IDADE INT,
	CIDADE VARCHAR(20),
	
	CHECK (IDADE >= 18 AND CIDADE = 'São Paulo')
)

INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('FRED',19,'Rio de Janeiro')

INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('PEDRO',17,'São Paulo')


INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('ALINE',20,'São Paulo')

SELECT * FROM CLIENTE_TESTE


UPDATE CLIENTE_TESTE
SET CIDADE = 'Manaus'
WHERE ID = 3

DROP TABLE CLIENTE_TESTE


---------- RESTRICOES ----------

CREATE TABLE CLIENTE_TESTE (
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR(20),
	IDADE INT,
	CIDADE VARCHAR (20),
	SEXO CHAR (1),
	EMAIL VARCHAR (30)
)

INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE,SEXO,EMAIL)
VALUES ('José dos Santos',30,'Campinas','M','jose@teste.com.br')

SELECT * FROM CLIENTE_TESTE

INSERT INTO CLIENTE_TESTE(IDADE,CIDADE,SEXO,EMAIL)
VALUES (30,'Campinas','M','jose@teste.com.br')

INSERT INTO CLIENTE_TESTE(IDADE,SEXO,EMAIL)
VALUES (30,'M','jose@teste.com.br')


INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE,SEXO,EMAIL)
VALUES ('Márcio dos Santos',30,'Campinas','M','jose@teste.com.br')


DROP TABLE CLIENTE_TESTE

------------ ***************** --------------------
--USANDO O NULL
CREATE TABLE CLIENTE_TESTE (
	
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR(20) NOT NULL,
	IDADE INT NULL,
	CIDADE VARCHAR (20) NOT NULL
	
)

GO

SP_HELP CLIENTE_TESTE


INSERT INTO CLIENTE_TESTE(NOME,CIDADE)
VALUES ('Márcio dos Santos','Campinas')

SELECT * FROM CLIENTE_TESTE

INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE)
VALUES ('José dos Santos',NULL,'Campinas')

INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE)
VALUES ('Maria Cris',15,'Campinas')

INSERT INTO CLIENTE_TESTE(NOME,IDADE)
VALUES ('Pedro Henrique',25)

INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE)
VALUES ('Pedro Henrique',25,'Campinas')




-------- USANDO O CHECK -----

CREATE TABLE CLIENTE_TESTE(
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR (20),
	IDADE INT,
	CIDADE VARCHAR(20),
	
	CHECK (IDADE >= 18)

)


INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('FRED',19,'Rio de Janeiro')


SELECT * FROM CLIENTE_TESTE

INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('PEDRO',17,'São Paulo')


INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('ALINE',20,'São Paulo')


DROP TABLE CLIENTE_TESTE
GO

---****************************************---
CREATE TABLE CLIENTE_TESTE (
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR (20),
	IDADE INT,
	CIDADE VARCHAR(20),
	
	CHECK (IDADE >= 18 AND CIDADE = 'São Paulo')
)

INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('FRED',19,'Rio de Janeiro')

INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('PEDRO',17,'São Paulo')


INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE)
VALUES ('ALINE',20,'São Paulo')

SELECT * FROM CLIENTE_TESTE


UPDATE CLIENTE_TESTE
SET CIDADE = 'Manaus'
WHERE ID = 3

DROP TABLE CLIENTE_TESTE
---------- RESTRICOES ----------
--SEM RESTRICAO
CREATE TABLE CLIENTE_TESTE (
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR(20),
	IDADE INT,
	CIDADE VARCHAR (20),
	SEXO CHAR (1),
	EMAIL VARCHAR (30)
)

INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE,SEXO,EMAIL)
VALUES ('José dos Santos',30,'Campinas','M','jose@teste.com.br')

SELECT * FROM CLIENTE_TESTE

INSERT INTO CLIENTE_TESTE(IDADE,CIDADE,SEXO,EMAIL)
VALUES (30,'Campinas','M','jose@teste.com.br')

INSERT INTO CLIENTE_TESTE(IDADE,SEXO,EMAIL)
VALUES (30,'M','jose@teste.com.br')


INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE,SEXO,EMAIL)
VALUES ('Márcio dos Santos',30,'Campinas','M','jose@teste.com.br')


DROP TABLE CLIENTE_TESTE

------------ ***************** --------------------
--USANDO O NULL
CREATE TABLE CLIENTE_TESTE (
	
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR(20) NOT NULL,
	IDADE INT NULL,
	CIDADE VARCHAR (20) NOT NULL
	
)

GO

SP_HELP CLIENTE_TESTE

--SEM O CAMPO NO INSERT
INSERT INTO CLIENTE_TESTE(NOME,CIDADE)
VALUES ('Márcio dos Santos','Campinas')

SELECT * FROM CLIENTE_TESTE

--COM O CAMPO NO INSERT
INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE)
VALUES ('José dos Santos',NULL,'Campinas')

--MESMO QUE O CAMPO SEJA NULL, ELE PODE RECEBER VALORES
INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE)
VALUES ('Maria Cris',15,'Campinas')

--QUANDO O CAMPO FOR NOT NUL, É OBRIGATORIO O USO DE VALOR 
INSERT INTO CLIENTE_TESTE(NOME,IDADE)
VALUES ('Pedro Henrique',25)

--INSERT CORRETO
INSERT INTO CLIENTE_TESTE(NOME,IDADE,CIDADE)
VALUES ('Pedro Henrique',25,'Campinas')

SELECT * FROM CLIENTE_TESTE

--ABRINDO PARENTESE 
CREATE TABLE TESTE_IDENTITY(
	ID INT IDENTITY (1,1),
	NOME VARCHAR (20)
)
GO
SELECT * FROM  TESTE_IDENTITY

INSERT INTO TESTE_IDENTITY(NOME)
VALUES ('Jéssica Santos')

INSERT INTO TESTE_IDENTITY(NOME)
VALUES ('Franciso Lima')

INSERT INTO TESTE_IDENTITY(NOME)
VALUES ('Felipe Santos')

INSERT INTO TESTE_IDENTITY(NOME)
VALUES ('MAURO GALVAO FJKDJFKDJKFJKDSJLKDJFLKSJDLKFJSKLDJF KLSJDKFLJSLKDJFKLS FKLSJDKFLJSKLJFSD ')


SELECT * FROM TESTE_IDENTITY

INSERT INTO TESTE_IDENTITY(NOME)
VALUES ('Pedro Henrique')

DELETE TESTE_IDENTITY
WHERE ID = 5

DBCC CHECKIDENT (TESTE_IDENTITY,RESEED,3)

INSERT INTO TESTE_IDENTITY (NOME)
VALUES ('Márcio Ladislau')

---identity --> 000001, 000002, .....

--FUNCAO  PARA TIPOS DE STRING
--REPLICA CARACTERES ONDE VAI PASSAR A QUANTIDADE DE REPETICAO
--TEM DOIS ARGUMENTOS
-- RETORNO DELA UMA STRING
SELECT REPLICATE ('*',3)

SELECT * FROM [TABELA DE PRODUTOS]

SELECT [NOME DO PRODUTO], REPLICATE('0',4)+[CODIGO DO PRODUTO] AS 'CODIGO DO PRODUTO' FROM [TABELA DE PRODUTOS]


SELECT CONCAT(REPLICATE('0',4),CONVERT (VARCHAR,ID)) AS 'ID', NOME FROM TESTE_IDENTITY

SELECT * FROM TESTE_IDENTITY

--COLUNA COMPUTADA ---> COLUNA VIRTUAL
--A COLUNA VIRTUAL ELA NAO ESTA FISICAMENTE ARMAZENADA NA TABELA 
ALTER TABLE TESTE_IDENTITY
ADD ID_2 AS CONCAT(REPLICATE('0',4),CONVERT (VARCHAR,ID))

--EXISTE UMA FORMA DE PERSISTIR OS DADOS REALMENTE NA TABELA -->PERSISTED
ALTER TABLE TESTE_IDENTITY
ADD ID_2 AS CONCAT(REPLICATE('0',4),CONVERT (VARCHAR,ID)) PERSISTED



SELECT * FROM TESTE_IDENTITY

DROP TABLE TESTE_IDENTITY

---DESAFIO DE HOJE 
CREATE TABLE TESTE_IDENTITY(
	ID INT IDENTITY (1,1),
	NOME VARCHAR (20),
	ID_2 AS CONCAT(REPLICATE('0',4),CONVERT (VARCHAR,ID)) PERSISTED 
)

----------------------------------------
CREATE TABLE CLIENTE_TESTE_2 (
	ID_CLIENTE INT IDENTITY NOT NULL,
	NOME VARCHAR (20) NOT NULL,
	IDADE INT NOT NULL,
	CIDADE VARCHAR (20) NOT NULL,
	SEXO CHAR (1) NOT NULL,
	EMAIL VARCHAR (30) NOT NULL,
	DATA DATETIME NOT NULL,

	--RESTRICOES
	CHECK (IDADE >= 18),
	CHECK (SEXO IN ('M','F')),
	CHECK (DATEDIFF (DAY,GETDATE(),DATA)>4),
	PRIMARY KEY (ID_CLIENTE),
	UNIQUE (EMAIL) 

)

SELECT * FROM  CLIENTE_TESTE_2


INSERT INTO CLIENTE_TESTE_2 (NOME,IDADE,CIDADE,SEXO,EMAIL,DATA)
VALUES ('José Laborda',42,'Campinas','M','jose@teste.com.br',GETDATE()+5)

DROP TABLE CLIENTE_TESTE_2

--COM USO DO TERMO CONSTRAINT 
CREATE TABLE CLIENTE_TESTE_2 (
	ID_CLIENTE INT IDENTITY NOT NULL,
	NOME VARCHAR (20) NOT NULL,
	IDADE INT NOT NULL,
	CIDADE VARCHAR (20) NOT NULL,
	SEXO CHAR (1) NOT NULL,
	EMAIL VARCHAR (30) NOT NULL,
	DATA DATETIME NOT NULL,
	NUMERO INT NOT NULL,

	--RESTRICOES
	CONSTRAINT CK_IDADE CHECK (IDADE >= 18),
	CONSTRAINT CK_SEXO CHECK (SEXO IN ('M','F')),
	CONSTRAINT CK_DATA  CHECK (DATEDIFF (DAY,GETDATE(),DATA)>4),
	CONSTRAINT PK_ID PRIMARY KEY (ID_CLIENTE),
	CONSTRAINT UQ_EMAIL UNIQUE (EMAIL), 
	CONSTRAINT FK_CLIENTE_TESTE_2_TABELA_DE_NOTAS_FISCAIS FOREIGN KEY (NUMERO) REFERENCES [TABELA DE NOTAS FISCAIS] (NUMERO)
)


SP_HELP [TABELA DE NOTAS FISCAIS]

SP_HELP CLIENTE_TESTE_2


DROP TABLE CLIENTE_TESTE_2

--ALTERANDO A TABELA PARA ADICIONAR CONSTRAINT
CREATE TABLE CLIENTE_TESTE_2 (
	ID_CLIENTE INT IDENTITY NOT NULL,
	NOME VARCHAR (20) NOT NULL,
	IDADE INT NOT NULL,
	CIDADE VARCHAR (20) NOT NULL,
	SEXO CHAR (1) NOT NULL,
	EMAIL VARCHAR (30) NOT NULL,
	DATA DATETIME NOT NULL,
	NUMERO INT NOT NULL,

	--RESTRICOES
	CONSTRAINT CK_IDADE CHECK (IDADE >= 18),
	CONSTRAINT CK_SEXO CHECK (SEXO IN ('M','F')),
	CONSTRAINT CK_DATA  CHECK (DATEDIFF (DAY,GETDATE(),DATA)>4),
	CONSTRAINT UQ_EMAIL UNIQUE (EMAIL), 
)

ALTER TABLE CLIENTE_TESTE_2
ADD CONSTRAINT PK_ID PRIMARY KEY (ID_CLIENTE)

ALTER TABLE CLIENTE_TESTE_2
ADD CONSTRAINT FK_CLIENTE_TESTE_2_TABELA_DE_NOTAS_FISCAIS FOREIGN KEY (NUMERO) REFERENCES [TABELA DE NOTAS FISCAIS] (NUMERO)


ALTER TABLE CLIENTE_TESTE_2
DROP PK_ID


--SINONIMOS
CREATE SYNONYM CT_2
FOR CLIENTE_TESTE_2

SELECT * FROM CT_2
GO



------REVISAO TRIGGERS ----
--CRIAR UMA TABELA DE TESTE
CREATE TABLE TESTE_TRIGGER (
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR (20)
)

SELECT * FROM TESTE_TRIGGER

INSERT INTO TESTE_TRIGGER(NOME)
VALUES ('Roberto Silva')

INSERT INTO TESTE_TRIGGER(NOME)
VALUES ('Sara Cristine')

--CRIANDO TRIGGER 1
CREATE TRIGGER TG_TESTE_1
ON TESTE_TRIGGER
FOR INSERT
AS
BEGIN
	SELECT * FROM inserted

END

SELECT * FROM TESTE_TRIGGER

INSERT INTO TESTE_TRIGGER(NOME)
VALUES ('Bruno César')

--CRIANDO TRIGGER 2
CREATE TRIGGER TG_TESTE_2
ON TESTE_TRIGGER
FOR INSERT
AS
BEGIN
	SELECT * FROM inserted
	SELECT * FROM [TABELA DE VENDEDORES]

END


SELECT * FROM TESTE_TRIGGER

INSERT INTO TESTE_TRIGGER(NOME)
VALUES ('Maria Brandão')

--CRIANDO TRIGGER 3
CREATE TRIGGER TG_TESTE_3
ON TESTE_TRIGGER
FOR INSERT
AS
BEGIN
	SELECT * FROM VW_CLIENTE_VENDEDOR

END

SELECT * FROM TESTE_TRIGGER

INSERT INTO TESTE_TRIGGER(NOME)
VALUES ('Rogério Sampaio')

--CRIANDO TRIGGER 4
CREATE TRIGGER TG_TESTE_4
ON TESTE_TRIGGER
FOR UPDATE
AS
BEGIN
	SELECT * FROM deleted
	SELECT * FROM inserted
	ROLLBACK TRANSACTION

END

SELECT * FROM TESTE_TRIGGER

UPDATE TESTE_TRIGGER
SET NOME = 'TESTE'

--CRIANDO TRIGGER 5
CREATE TRIGGER TG_TESTE_5
ON TESTE_TRIGGER
FOR DELETE
AS
BEGIN
	SELECT * FROM deleted
	ROLLBACK TRANSACTION

END

SELECT * FROM TESTE_TRIGGER

DELETE TESTE_TRIGGER
WHERE ID = 2

--DESALIBITANDO TRIGGER 
ALTER TABLE TESTE_TRIGGER
DISABLE TRIGGER [TG_TESTE_5]


SP_HELPTEXT [TG_TESTE_5]

SP_HELPTRIGGER TESTE_TRIGGER


--CRIANDO UMA TRIGGER PARA MONITOR
CREATE TRIGGER TG_CRIAR_TABELA
ON DATABASE
FOR CREATE_TABLE
AS
BEGIN
	SELECT EVENTDATA()
END

CREATE  TABLE TESTE_TABELA (
	NOME VARCHAR (20)
)




------- T-SQL -------------------
--DECLARACAO DE VARIAVEIS 
DECLARE @IDADE INT

DECLARE @NOME VARCHAR (50)

DECLARE @DATA DATE 
GO

DECLARE @IDADE INT, @NOME VARCHAR(50), @DATA DATE
SET @IDADE = 35
PRINT @IDADE
SET @NOME = 'Lael dos Santos'
PRINT @NOME
SET @DATA = '2021-09-20'
PRINT @DATA
GO

SELECT * FROM [TABELA DE CLIENTES]
--NO ATO DA DECLARACAO JA PODEMOS DAR VALOR A VARIAVEL
DECLARE @CPF VARCHAR (12) = '95939180787' 
PRINT @CPF
GO

DECLARE @CPF VARCHAR (11)
SET @CPF = '95939180787'
GO

SELECT NOME,[DATA DE NASCIMENTO],IDADE FROM [TABELA DE CLIENTES]
WHERE CPF = '95939180787'
GO
-----------
DECLARE @CPF VARCHAR (11)
SET @CPF = '95939180787'

SELECT NOME,[DATA DE NASCIMENTO], IDADE FROM [TABELA DE CLIENTES]
WHERE CPF = @CPF
GO
-----
DECLARE @CPF VARCHAR (11)
SET @CPF = '1471156710'
DECLARE @NOME VARCHAR (50),@DATA DATE, @IDADE INT

SELECT @NOME=NOME, @DATA=[DATA DE NASCIMENTO], @IDADE=IDADE FROM [TABELA DE CLIENTES]
WHERE CPF = @CPF

PRINT @NOME
PRINT @DATA
PRINT @IDADE
GO
---- COM INSERT
SELECT * FROM [TABELA DE VENDEDORES]
--DECLARACAO DAS VARIAVEIS
DECLARE @MATRICULA VARCHAR(5), @NOME VARCHAR(100), @PERCETUAL FLOAT, @DATA DATE, @FERIAS BIT, @BAIRRO VARCHAR(50)
--SET DAS VARIAVEIS
SET @MATRICULA = '00240'
SET @NOME = 'Vanessa Martins'
SET @PERCETUAL = 0.7
SET @DATA = '2021-09-20'
SET @FERIAS = 0
SET @BAIRRO = 'Jardins'

INSERT INTO [TABELA DE VENDEDORES] (MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA ADMISSAO],[DE FERIAS],BAIRRO)
VALUES (@MATRICULA,@NOME,@PERCETUAL,@DATA,@FERIAS,@BAIRRO)

SELECT * FROM [TABELA DE VENDEDORES]
GO
--COM INSERT 2
DECLARE @MATRICULA VARCHAR(5), @NOME VARCHAR(100), @PERCETUAL FLOAT, @DATA DATE, @FERIAS BIT, @BAIRRO VARCHAR(50)
--SET DAS VARIAVEIS
SET @MATRICULA = '00241'
SET @NOME = 'Claudinei Machado'
SET @PERCETUAL = 0.8
SET @DATA = '2021-09-20'
SET @FERIAS = 0
SET @BAIRRO = 'Lapa'

INSERT INTO [TABELA DE VENDEDORES] (MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA ADMISSAO],[DE FERIAS],BAIRRO)
VALUES (@MATRICULA,@NOME,@PERCETUAL,@DATA,@FERIAS,@BAIRRO)

SELECT * FROM [TABELA DE VENDEDORES]
GO
-----------------------------------------------------------

--- DESAFIO 01 - AULA 17 -----
DECLARE @CLIENTE VARCHAR(10), @IDADE INT, @DATANASCIMENTO DATE, @CUSTO FLOAT
SET @CLIENTE = 'João'
SET @IDADE = 10
SET @DATANASCIMENTO = '2007-01-10'
SET @CUSTO = 10.23
PRINT 'Cliente: '+@CLIENTE
PRINT 'Idade: '+ CONVERT (VARCHAR,@IDADE)
PRINT 'Data de Nascimento: '+ CONVERT (VARCHAR,@DATANASCIMENTO)
PRINT 'Custo: ' + CONVERT (VARCHAR,@CUSTO)

SELECT @CLIENTE AS 'CLIENTE', @IDADE AS 'IDADE', @DATANASCIMENTO AS 'DATA DE NASCIMENTO',@CUSTO AS 'CUSTO'

------------------------------------------------------------------------------------
--MAIS EXEMPLO DE USO DE VARIAVEL
SELECT * FROM [TABELA DE PRODUTOS]

DECLARE @PRECO_MAXIMO FLOAT

SELECT @PRECO_MAXIMO = MAX([PRECO DE LISTA]) FROM [TABELA DE PRODUTOS]
PRINT @PRECO_MAXIMO 
-------------------------------------------------------------
-- DESAFIO 02 - AULA17 -----
DECLARE @NUMNOTAS INT

--SET OU SELECT

SELECT @NUMNOTAS = COUNT (NUMERO)  FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '2017-01-01'
PRINT @NUMNOTAS
-- CONTROLE DE FLUXO

--VARIAVEL = 10

--SE (VARIAVAL > 5) --BOOLEANA
	--IMPRIME "É MAIOR QUE 5" -----> CONDICAO VERDADEIRO
--SENAO
	--IMPRIME "NAO É MAIOR QUE 5" ------> CONDICAO FALSA 

--USO DO CREATE
CREATE TABLE TAB_TESTE (
	NOME VARCHAR (20)
)

-- APAGANDO A TABELA 
DROP TABLE TAB_TESTE

--USO DO CREATE NOVAMENTE
CREATE TABLE TAB_TESTE (
	NOME VARCHAR (20)
)
-- CRIANDO UM FLUXO PARA TESTAR A CONDICAO SE A TABELA FOI CRIADA OU NÃO
IF OBJECT_ID('TAB_TESTE','U') IS NOT NULL 

		DROP TABLE TAB_TESTE
ELSE

	CREATE TABLE TAB_TESTE
	(
		NOME VARCHAR (20)
	)




---------- CONTROLE DE FLUXO DOS VALORES DE VARIAVEIS ----
SELECT GETDATE()
SELECT DATENAME (WEEKDAY,GETDATE())
SELECT DATENAME (WEEKDAY,DATEADD (DAY,4,GETDATE()))
--SELECT DATENAME (WEEKDAY,GETDATE()+4)

DECLARE @DIA_SEMANA VARCHAR (12), @NUMERO_DIAS INT
SET @NUMERO_DIAS = 5
SET @DIA_SEMANA = DATENAME (WEEKDAY,DATEADD (DAY,@NUMERO_DIAS,GETDATE()))
PRINT @DIA_SEMANA

IF @DIA_SEMANA = 'Domingo' OR @DIA_SEMANA = 'Sábado' ---> V
	BEGIN
		PRINT 'Este dia é fim de semana'
	END
ELSE 
	BEGIN
		PRINT 'Este dia é dia de semana'	
	END
----------------------------------------------
--@CPF: 51073366288
--@IDADE ---> 

SELECT CPF,NOME,IDADE FROM [TABELA DE CLIENTES] ---> MENOR OU IGUAL A 21 ---> JOVEM	
GO											---> MAIOR QUE 21 ---> ADULTO 		
--- RESPOSTA DO ALUNO LUCAS CARVALHO:
DECLARE @NOME VARCHAR(50),@IDADE INT,@CPF VARCHAR (12)
SET @CPF = '7771579779'

SELECT @NOME = NOME,@IDADE = IDADE 
FROM [TABELA DE CLIENTES]
WHERE CPF = @CPF
PRINT @NOME
PRINT @IDADE
PRINT @CPF
--CONTROLE DO FLUXO
IF @IDADE <= 21 ---> V
 BEGIN
  PRINT 'Cliente Jovem'
 END
ELSE---> F
 BEGIN
  PRINT 'Cliente Adulto'
 END


 ---DESAFIO 03 - AULA 17 ----
 --ANALISE INICIAL 
 SELECT DATA, COUNT (NUMERO) AS 'QTD. NOTAS' FROM [TABELA DE NOTAS FISCAIS]
 GROUP BY DATA
 --MAIS SIMPLES 
 SELECT COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS]
 WHERE DATA = '2018-03-09'
 GO

DECLARE @DATA_NOTA DATE, @QTD_NOTAS INT

SET @DATA_NOTA = '2017-12-22'

SELECT @QTD_NOTAS =  COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = @DATA_NOTA

IF @QTD_NOTAS > 70 
	PRINT 'Muita Nota!!'
ELSE 
	PRINT 'Pouca Nota'
PRINT @QTD_NOTAS


------ CONTROLE DE FLUXO USANDO SELECT ------
SELECT * FROM [TABELA DE CLIENTES]
--ANALISE 
SELECT SUM ([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES]
WHERE BAIRRO = 'Jardins'
GO
DECLARE @LIMITE_MAXIMO FLOAT, @LIMITE_ATUAL FLOAT, @BAIRRO VARCHAR (20) 

SET @BAIRRO = 'Jardins'
SET @LIMITE_MAXIMO = 400000

 SELECT @LIMITE_ATUAL = SUM ([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES]  WHERE BAIRRO = @BAIRRO

 IF @LIMITE_MAXIMO <= (SELECT SUM ([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] WHERE BAIRRO = @BAIRRO)
	PRINT 'Houve um estouro do limite. Não é possível abrir novos créditos!'
 ELSE
	PRINT 'Não houve estouro do limite. É possível abrir novos créditos!'

GO
-- USANDO A VARIAVEL 

DECLARE @LIMITE_MAXIMO FLOAT, @LIMITE_ATUAL FLOAT, @BAIRRO VARCHAR (20) 

SET @BAIRRO = 'Jardins'
SET @LIMITE_MAXIMO = 500000

 SELECT @LIMITE_ATUAL = SUM ([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES]  WHERE BAIRRO = @BAIRRO

 IF @LIMITE_MAXIMO <= @LIMITE_ATUAL
	PRINT 'Houve um estouro do limite. Não é possível abrir novos créditos!'
 ELSE
	PRINT 'Não houve estouro do limite. É possível abrir novos créditos!'


----- DESAFIO 04  DA AULA 17 ---------
--ANALISE INICIAL 
 SELECT DATA, COUNT (NUMERO) AS 'QTD. NOTAS' FROM [TABELA DE NOTAS FISCAIS]
 GROUP BY DATA
 --MAIS SIMPLES 
 SELECT COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS]
 WHERE DATA = '2018-03-09'
 GO

DECLARE @DATA_NOTA DATE

SET @DATA_NOTA = '2017-12-22'

--ATRIBUINDO  O RESULTADO DO SELECT A VARIAVEL @QTD_NOTAS 
--SELECT @NUMNOTAS =  COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS]
--WHERE DATA = @DATA_NOTA

IF (SELECT COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS] WHERE DATA = @DATA_NOTA) > 70 
	
	PRINT 'Muita Nota!!'
ELSE 
	PRINT 'Pouca Nota'

------ LOOPING (WHILE) --------
DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT
SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 10

--LOOPING
--ENQUANTO
---ENQUANTO ESTA CONDICAO FOR VERDADEIRA AS INSTRUCOES ABAIXO VAO SER EXECUTADAS
WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO --V,V,V,V,F
	BEGIN
		PRINT @LIMITE_MINIMO ---> 1,2,3....10
		SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1 ---INCREMENTAR A VARIAVEL,  2,3,4 ....10,11
	END




			BEGIN
				BREAK
			END
	END
GO
--TERCEIRO EXEMPLO
DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT
SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 10

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO ---> V
	BEGIN

		PRINT @LIMITE_MINIMO -->IMPRIMINDO A VARIAVEL 
		SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1 --> INCREMENTANDO A VARIAVEL
		
		IF @LIMITE_MINIMO = 6
			BEGIN
				PRINT 'Saindo por causa do BREAK'
				BREAK
			END
	END

GO
--QUARTO EXEMPLO
DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT
SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 20

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO ---> V
	BEGIN

		PRINT @LIMITE_MINIMO -->IMPRIMINDO A VARIAVEL 
		SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1 --> INCREMENTANDO A VARIAVEL
		
		IF @LIMITE_MINIMO = 6
			BEGIN
				PRINT 'Continuando por causa do CONTINUE'
				PRINT '...'
				CONTINUE
				BREAK
			END
	END




---- DESAFIO 05 DA AULA 17  ----
--SELECT DATEADD (DAY,5,GETDATE())

--RESPOSTA DO ALUNO: FABIO PEDROZA

--ANALISE 
SELECT COUNT(*) FROM [TABELA DE NOTAS FISCAIS] 
WHERE DATA = '2017-01-03'

DECLARE @DATAINICIAL DATE, @DATAFINAL DATE, @QTD_NOTAS INT, @NCONTADOR INT, @NTOTAL INT --> ACUMULADOR

SET @DATAINICIAL = '2017-01-01'
SET @DATAFINAL   = '2017-01-10'
SET @NCONTADOR   = 1
SET @NTOTAL     = 0


WHILE @DATAINICIAL <= @DATAFINAL
  BEGIN
  
    SET @QTD_NOTAS = (SELECT COUNT(*) FROM [TABELA DE NOTAS FISCAIS] WHERE DATA = @DATAINICIAL)
    SET @NTOTAL +=  (SELECT COUNT(*) FROM [TABELA DE NOTAS FISCAIS] WHERE DATA = @DATAINICIAL) 
	--EXEMPLO DE ACUMULADOR ---> SET @VARIAVEL = @VARIAVEL + @VARIAVEL
    PRINT CONCAT(CONVERT(VARCHAR,@DATAINICIAL), ' --> ', CONVERT(VARCHAR,@QTD_NOTAS) )

    SET @DATAINICIAL = DATEADD(DAY, @NCONTADOR, @DATAINICIAL) ---> INCREMENTACAO DA VARIAVEL 
	--EXEMPLO --> SET @VARIAVEL = @VARIAVEL + 1
  END

PRINT @NTOTAL
GO
---------------------------------------------
--QUINTO EXEMPLO
IF OBJECT_ID ('TABELA_NUMEROS','U') IS NOT NULL
	DROP TABLE TABELA_NUMEROS
	CREATE TABLE TABELA_NUMEROS (
			NUMERO INT,
			STATUS VARCHAR (200)
	)

--ANALISE 
SELECT NUMERO FROM [TABELA DE NOTAS FISCAIS]

SELECT MIN (NUMERO) FROM [TABELA DE NOTAS FISCAIS]

SELECT MAX(NUMERO) FROM [TABELA DE NOTAS FISCAIS]


SELECT NUMERO FROM [TABELA DE NOTAS FISCAIS]
WHERE NUMERO = 1500


SELECT COUNT (*) FROM [TABELA DE NOTAS FISCAIS] WHERE NUMERO = 1


---FIM DA ANALISE ---

DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @STATUS_NOTA INT
SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 1000

SET NOCOUNT ON ---> IMPEDE QUE SEJA MOSTRADO A MENSAGEM DE LINHAS AFETADAS 
WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
	BEGIN
		--ATRIBUINDO O VALOR DA CONSULTA A VARIAVEL @STATUS_NOTA
		SELECT @STATUS_NOTA = COUNT (*) FROM [TABELA DE NOTAS FISCAIS] WHERE NUMERO = @LIMITE_MINIMO
		
		--VAMOS COMPARAR O @STATUS_NOTA
		IF @STATUS_NOTA > 0
			BEGIN
				INSERT INTO TABELA_NUMEROS (NUMERO,STATUS)
				VALUES (@LIMITE_MINIMO,'É NOTA FISCAL!')
			END
		ELSE 
			BEGIN
				INSERT INTO TABELA_NUMEROS (NUMERO,STATUS)
				VALUES (@LIMITE_MINIMO,'NÃO É NOTA FISCAL')

			END
		SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1 ---> INCREMENTANDO O @LIMITE_MINIMO
	END



	SELECT * FROM TABELA_NUMEROS



	------------------------------------------
---DESAFIO 05 DA AULA 17 -----

--ANALISE
SELECT GETDATE()
SELECT DATEADD (DAY,1,GETDATE())


SELECT DATA,NUMERO FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '2015-01-03'

SELECT COUNT (NUMERO) AS 'QTD_NOTAS' FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '2017-01-03'
---------------------------------------------------------------
DECLARE @DATAINICIAL DATE, @DATAFINAL DATE, @QTD_NOTAS INT
SET @DATAINICIAL = '2017-01-01' ---> '2017-01-02' --> '2017-01-03'
SET @DATAFINAL = '2017-01-10'

WHILE @DATAINICIAL <= @DATAFINAL --->V
	BEGIN
		SELECT @QTD_NOTAS = COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS] WHERE DATA = @DATAINICIAL
		PRINT CONVERT (VARCHAR,@DATAINICIAL) + ' --> ' + CONVERT (VARCHAR,@QTD_NOTAS)

		SELECT @DATAINICIAL = DATEADD (DAY,1,@DATAINICIAL) --> INCREMENTACAO DA VARIAVEL
	END

----------------------------------------------------------------
-----DESAFIO 06 DA AULA 17 --------

--ANALISE 
DECLARE @DATAINICIAL DATE, @DATAFINAL DATE, @QTD_NOTAS INT
SET @DATAINICIAL = '2017-01-01' ---> '2017-01-02' --> '2017-01-03'
SET @DATAFINAL = '2017-01-10'

WHILE @DATAINICIAL <= @DATAFINAL --->V
	BEGIN
		SELECT @QTD_NOTAS = COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS] WHERE DATA = @DATAINICIAL
		PRINT CONVERT (VARCHAR,@DATAINICIAL) + ' --> ' + CONVERT (VARCHAR,@QTD_NOTAS)

		SELECT @DATAINICIAL = DATEADD (DAY,1,@DATAINICIAL) --> INCREMENTACAO DA VARIAVEL
	END
GO
-----CRIACAO DA TABELA ------
CREATE TABLE TABELANOTAS (
	DATA DATE,
	QTD_NOTAS INT
)

DECLARE @DATAINICIAL DATE, @DATAFINAL DATE, @QTD_NOTAS INT
SET @DATAINICIAL = '2017-01-01' ---> '2017-01-02' --> '2017-01-03'
SET @DATAFINAL = '2017-01-10'

WHILE @DATAINICIAL <= @DATAFINAL --->V
	BEGIN
		SELECT @QTD_NOTAS = COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS] WHERE DATA = @DATAINICIAL
		
		
		--INSERINDO NA TABELA
		INSERT INTO TABELANOTAS (DATA,QTD_NOTAS)
		VALUES (@DATAINICIAL,@QTD_NOTAS)
		
		SELECT @DATAINICIAL = DATEADD (DAY,1,@DATAINICIAL) --> INCREMENTACAO DA VARIAVEL
	END
--------------------------------------------------------------------------------------
---TABELAS TEMPORARIAS -------
CREATE TABLE #TABELA01 (
	ID VARCHAR (10) NULL,
	NOME VARCHAR (200) NULL
)

INSERT INTO #TABELA01 (ID,NOME)
VALUES ('1','PEDRO')

INSERT INTO #TABELA01 (ID,NOME)
VALUES ('2','SARA')


SELECT * FROM #TABELA01

SP_HELP '#TABELA01'---ALT + F1


-------------------------------------
CREATE TABLE ##TABELA02 (
	ID VARCHAR (10),
	NOME VARCHAR (200)
)


INSERT INTO ##TABELA02 (ID,NOME)
VALUES ('1','PEDRO')

INSERT INTO ##TABELA02 (ID,NOME)
VALUES ('2','SARA')

SELECT * FROM ##TABELA02


DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT
DECLARE @TABELA03 TABLE (ID VARCHAR (10), NOME VARCHAR (200))

SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 10

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO 
	BEGIN
		INSERT INTO  @TABELA03(ID,NOME)
		VALUES (@LIMITE_MINIMO,'TESTE')

		SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1
	END

SELECT * FROM @TABELA03

GO
----------------------------------------------


DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @STATUS_NOTA INT
DECLARE @TABELA_NUMEROS2 TABLE (NUMERO INT, STATUS VARCHAR (200))
CREATE TABLE #TABELA_NUMEROS3  (NUMERO INT, STATUS VARCHAR (200))

SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 1000
SET NOCOUNT ON ---> IMPEDE QUE SEJA MOSTRADO A MENSAGEM DE LINHAS AFETADAS 
WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
 BEGIN
  --ATRIBUINDO O VALOR DA CONSULTA A VARIAVEL @STATUS_NOTA
  SELECT @STATUS_NOTA = COUNT (*) FROM [TABELA DE NOTAS FISCAIS] WHERE NUMERO = @LIMITE_MINIMO
  
  --VAMOS COMPARAR O @STATUS_NOTA
  IF @STATUS_NOTA > 0
   BEGIN
    INSERT INTO @TABELA_NUMEROS2 (NUMERO,STATUS) VALUES (@LIMITE_MINIMO,'É NOTA FISCAL!')
	INSERT INTO #TABELA_NUMEROS3 (NUMERO,STATUS) VALUES (@LIMITE_MINIMO,'É NOTA FISCAL!')
   END
  ELSE 
   BEGIN
    INSERT INTO @TABELA_NUMEROS2 (NUMERO,STATUS) VALUES (@LIMITE_MINIMO,'NÃO É NOTA FISCAL')
	INSERT INTO #TABELA_NUMEROS3 (NUMERO,STATUS) VALUES (@LIMITE_MINIMO,'NÃO É NOTA FISCAL')

   END
  SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1 ---> INCREMENTANDO O @LIMITE_MINIMO
 END
  
  
  SELECT * FROM @TABELA_NUMEROS2


  SELECT * FROM #TABELA_NUMEROS3


-------------------- AULA 18 - FUNCAO UDF ------------------------------

--ANALISE
SELECT *  FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT SUM(QUANTIDADE * PRECO) FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = 114
GO
-----------CRIANDO A FUNCAO ----
							--PARAMETRO DE ENTRADA
CREATE FUNCTION FaturamentoNota (@NUMERO INT) RETURNS FLOAT
AS
BEGIN
	DECLARE @FATURAMENTO FLOAT 
	
	SELECT @FATURAMENTO = SUM(QUANTIDADE * PRECO) FROM [TABELA DE ITENS NOTAS FISCAIS] WHERE NUMERO = @NUMERO
	
	RETURN @FATURAMENTO ---> RETORNO DA FUNCAO 
END
GO


SELECT NUMERO,[dbo].[FaturamentoNota](NUMERO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]

SELECT NUMERO,[dbo].[FaturamentoNota](NUMERO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]
WHERE NUMERO >= 100 AND NUMERO <=200
ORDER BY [dbo].[FaturamentoNota](NUMERO) DESC


--ANALISE
SELECT *  FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT SUM(QUANTIDADE * PRECO) FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = 116
GO
-----------CRIANDO A FUNCAO ----

--retorne o valor total do faturamento de uma determinada nota fiscal
CREATE FUNCTION FaturamentoNota (@NUMERO INT) RETURNS FLOAT -->PARAMETRO DE ENTRADA DA FUNCAO DO TIPO INTEIRO
AS 
	BEGIN
		DECLARE @FATURAMENTO FLOAT
		
		SELECT @FATURAMENTO =  SUM(QUANTIDADE * PRECO) FROM [TABELA DE ITENS NOTAS FISCAIS] WHERE NUMERO = @NUMERO

		RETURN @FATURAMENTO
	END
GO
	SELECT NUMERO,dbo.FaturamentoNota(NUMERO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]



------ DESAFIO 01 DA AULA 18 -------

--ANALISE
DECLARE @QTD_NOTAS INT

SELECT @QTD_NOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
    WHERE DATA = '20170101'
PRINT @QTD_NOTAS
GO

-------------------------------------------------
--RESPOSTA DO ALUNO: MÁRCIO TORRES


CREATE FUNCTION QuantidadeNotas(@DATA DATE) RETURNS INT
AS
	BEGIN
		 DECLARE @QTD_NOTAS INT

		 SELECT @QTD_NOTAS = COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS] WHERE DATA = @DATA

		 RETURN @QTD_NOTAS
	END
GO
----- TESTES -----

SELECT DATA,[dbo].[QuantidadeNotas](DATA) FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '2017-01-30'

SELECT dbo.QuantidadeNotas ('20170101') AS 'QUANTIDADE DE NOTAS POR DATA'

SELECT DATA, dbo.QuantidadeNotas(DATA) AS 'QUANTIDADE DE NOTAS POR DATA' FROM [TABELA DE NOTAS FISCAIS]
GROUP BY DATA 
ORDER BY DATA 

SELECT dbo.QuantidadeNotas ('2015-01-02') AS 'QUANTIDADE DE NOTAS POR DATA'
GO
------ FUNCAO DENTRO LOOP --------

--ANALISE

SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE NUMERO = 4


SELECT COUNT(*)FROM [TABELA DE NOTAS FISCAIS]
WHERE NUMERO = 100
----------------------------------------------------------

DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @STATUS_NOTAS INT
DECLARE @TABELA_NUMEROS TABLE (NUMERO INT, STATUS VARCHAR (200), FATURAMENTO FLOAT)
SET @LIMITE_MINIMO = 70
SET @LIMITE_MAXIMO = 110

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
	BEGIN
	
		SELECT @STATUS_NOTAS =  COUNT(*)FROM [TABELA DE NOTAS FISCAIS] WHERE NUMERO = @LIMITE_MINIMO
		IF @STATUS_NOTAS > 0
			BEGIN
				INSERT INTO @TABELA_NUMEROS (NUMERO,STATUS,FATURAMENTO)
				VALUES (@LIMITE_MINIMO,'É NOTA FISCAL',dbo.FaturamentoNota(@LIMITE_MINIMO))
			END
		ELSE 
			BEGIN
				INSERT INTO @TABELA_NUMEROS(NUMERO,STATUS,FATURAMENTO)
				VALUES (@LIMITE_MINIMO,'NÃO É NOTA FISCAL',0)

			END
			
		SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1
	END

	SELECT * FROM @TABELA_NUMEROS


GO
	-------DESAFIO 02 DA AULA 18 -------

--REALIZADO PELO ALUNO: OSMAR BECK

CREATE TABLE TABELANOTAS (DATANF DATE, TOTALNFS FLOAT)


DECLARE @DATAINICIAL DATE, @DATAFINAL DATE, @CONTAGEMNFS FLOAT
SET @DATAINICIAL = '2017-01-01'
SET @DATAFINAL = '2017-01-10'


WHILE @DATAINICIAL <= @DATAFINAL
 BEGIN
		SET @CONTAGEMNFS = (SELECT COUNT (NUMERO) FROM [TABELA DE NOTAS FISCAIS] WHERE DATA = @DATAINICIAL)
		INSERT INTO TABELANOTAS (DATANF, TOTALNFS)
		VALUES (@DATAINICIAL,[dbo].[QUANTIDADENOTAS](@DATAINICIAL))
		SET @DATAINICIAL = DATEADD(DAY,1,@DATAINICIAL)
 END
GO

SELECT CONVERT (VARCHAR,DATANF,103) AS 'DATA NF', TOTALNFS AS 'TOTAL NFS'FROM TABELANOTAS

---------- USANDO FUNCOES COMO TABELAS -----------------------
--Vamos criar uma funcao que retorna uma tabela. Nós vamos colocar como parametro funcao um determinado cpf de um cliente
--e a funcao vai retornar a lista de todas as notas fiscais deste cliente.
--> parametro de entrada: o cpf
--> lista de todas as notas fiscais deste cliente (TABELA)

--ANALISE
SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '2600586709'
GO
--CRIANDO FUNCAO
CREATE FUNCTION ListaNotasClientes (@CPF VARCHAR (11)) RETURNS TABLE
AS
RETURN SELECT * FROM [TABELA DE NOTAS FISCAIS] WHERE CPF = @CPF

---TESTANDO A FUNCAO ----
SELECT * FROM dbo.ListaNotasClientes('2600586709')

SELECT COUNT (*) FROM dbo.ListaNotasClientes('2600586709')

SELECT CPF, (SELECT COUNT (*) FROM dbo.ListaNotasClientes(CPF)) AS 'NUMERO DE NOTAS' 
FROM [TABELA DE CLIENTES]

SELECT * FROM 
(SELECT CPF, (SELECT COUNT (*) FROM dbo.ListaNotasClientes(CPF)) AS 'NUMERO DE NOTAS' 
FROM [TABELA DE CLIENTES])A

-------- DESAFIO  03 DA AULA 18 ---------------------------------
--ANALISE
SELECT DISTINCT DATA, [dbo].[QuantidadeNotas](DATA) AS 'NUMERO'
FROM [TABELA DE NOTAS FISCAIS] 
WHERE DATA >= '20170101' AND DATA <= '20170110'


--RESPOSTA DO DESAFIO
GO									--PARAMETROS DE ENTRADA DA FUNCAO
CREATE FUNCTION FuncTabelaNotas (@DATA_INICIAL DATE, @DATA_FINAL DATE) RETURNS TABLE 
AS
	RETURN
	SELECT DISTINCT DATA, [dbo].[QuantidadeNotas](DATA) AS 'NUMERO'
	FROM [TABELA DE NOTAS FISCAIS] 
	WHERE DATA >= @DATA_INICIAL AND DATA <= @DATA_FINAL


	--TESTANDO O DESAFIO 
	SELECT * FROM dbo.FuncTabelaNotas('20180101','20180102')
GO
---------------------------------------------------------------------------------
--------------- ALTERANDO UMA FUNCAO -------------------------------------------
CREATE FUNCTION EnderecoCompleto 
(@ENDERECO VARCHAR (100), @BAIRRO VARCHAR (20), @CIDADE VARCHAR (50), @ESTADO VARCHAR (5), @CEP VARCHAR (20)) RETURNS VARCHAR (250)
AS
	BEGIN
		DECLARE @ENDERECO_COMPLETO VARCHAR (250)
		SET @ENDERECO_COMPLETO = @ENDERECO + ' - '+@BAIRRO + ' - ' + @CIDADE + ' - ' + @ESTADO + ' - ' + @CEP 
		RETURN  @ENDERECO_COMPLETO 
	END
GO
SELECT * FROM [TABELA DE CLIENTES]

SELECT CPF,dbo.EnderecoCompleto(ENDERECO,BAIRRO,CIDADE,ESTADO,CEP) AS 'END. COMPLETO' FROM [TABELA DE CLIENTES]
GO
--ALTERANDO A FUNCAO

ALTER FUNCTION EnderecoCompleto 
(@ENDERECO VARCHAR (100), @BAIRRO VARCHAR (20), @CIDADE VARCHAR (50), @ESTADO VARCHAR (5), @CEP VARCHAR (20)) RETURNS VARCHAR (250)
AS
	BEGIN
		DECLARE @ENDERECO_COMPLETO VARCHAR (250)
		SET @ENDERECO_COMPLETO = @ENDERECO + ', '+@BAIRRO + ', ' + @CIDADE + ', ' + @ESTADO + ', ' + @CEP 
		RETURN  @ENDERECO_COMPLETO 
	END
GO
SELECT CPF,dbo.EnderecoCompleto(ENDERECO,BAIRRO,CIDADE,ESTADO,CEP) AS 'END. COMPLETO' FROM [TABELA DE CLIENTES]


--DESAFIO 04 REALIZADO 
-- ALUNO: EMANUEL SENA

ALTER FUNCTION [DBO].[FuncTabelaNotas] (@dataini DATE, @datafim date) 

RETURNS TABLE
AS
RETURN --select distinct data,[dbo].[quantidadenotas](data) as 'QTDE DE NOTAS' from [tabela de notas fiscais] where data BETWEEN @dataini and  @dataFIM
GO

select  data,count(*) as 'NUMERO' from [tabela de notas fiscais] where data BETWEEN @dataini and  @dataFIM
GROUP BY data 
GO
select * from [dbo].[FuncTabelaNotas]('2017-01-01','2017-01-10')
GO

----------- EXCLUINDO UMA FUNCAO ---------
DROP FUNCTION dbo.EnderecoCompleto2
GO

----------- AULA 19 - STORED PROCEDURE ---------------
--EXEMPLO 01 -- SELECIONAR ENTIDADES (TABELAS)


--- ID   ---> IDENTIFICADOR
--- DESCRITOR ---> DESCRICAO
CREATE PROCEDURE SelecionarEntidade @ENTIDADE VARCHAR (10)
AS
	BEGIN
			IF @ENTIDADE = 'CLIENTES'
				SELECT CPF AS 'IDENTIFICADOR', NOME AS 'DESCRITOR', BAIRRO AS 'BAIRRO' FROM [TABELA DE CLIENTES]
			ELSE IF @ENTIDADE = 'VENDEDORES'
				SELECT MATRICULA AS 'IDENTIFICADOR', NOME AS 'DESCRITOR', BAIRRO AS 'BAIRRO' FROM [TABELA DE VENDEDORES]

	END
GO


EXEC SelecionarEntidade @ENTIDADE = 'CLIENTES'

EXEC SelecionarEntidade @ENTIDADE = 'VENDEDORES'
GO
------- DESAFIO 01 - DA AULA 19 ----------------
--DESAFIO REALIZADO
--ALUNO: JONADABE SILVA 

CREATE PROCEDURE BuscaPorEntidadeCompleta @ENTIDADE VARCHAR (10)
AS
 BEGIN
   IF @ENTIDADE = 'CLIENTES'
     SELECT CPF AS 'INDENTIFICADOR',NOME AS 'DESCRITOR' FROM [TABELA DE CLIENTES]
   ELSE IF @ENTIDADE = 'VENDEDORES'
     SELECT MATRICULA AS 'IDENTIFICADOR', NOME AS 'DESCRITOR' FROM [TABELA DE VENDEDORES]
   ELSE IF @ENTIDADE = 'PRODUTOS'
     SELECT [CODIGO DO PRODUTO] AS 'IDENTIFICADOR', [NOME DO PRODUTO] AS 'DESCRITOR'  FROM [TABELA DE PRODUTOS]
 END
GO


EXEC BuscaPorEntidadeCompleta @ENTIDADE = 'PRODUTOS'

EXEC BuscaPorEntidadeCompleta @ENTIDADE = 'CLIENTES'

EXEC BuscaPorEntidadeCompleta @ENTIDADE = 'VENDEDORES'



------EXEMPLO 02 -- CALCULA IDADE -----

--ANALISE 
SELECT * FROM [TABELA DE CLIENTES]

--SIMULACAO 
SELECT DATEDIFF(YEAR,'2001-01-01',GETDATE()) 

UPDATE [TABELA DE CLIENTES]
SET IDADE = DATEDIFF(YEAR,[DATA DE NASCIMENTO],GETDATE())
GO
--CRIANDO A PROCEDURE

CREATE PROCEDURE CalculaIdade ---> SEM PARAMETRO
AS
	BEGIN
			UPDATE [TABELA DE CLIENTES] SET IDADE = DATEDIFF(YEAR,[DATA DE NASCIMENTO],GETDATE())
	END

--INSERINDO UM REGISTRO
INSERT INTO [TABELA DE CLIENTES] (CPF,NOME,ENDERECO,BAIRRO,CIDADE,ESTADO,CEP,[DATA DE NASCIMENTO],SEXO,[LIMITE DE CREDITO],
[VOLUME DE COMPRA],[PRIMEIRA COMPRA])
VALUES ('123123124', 'Denyson Oliveira', 'Rua das Mangueiras', 'Madureira','Rio de Janeiro','RJ','20000',
'2000-07-08','M',120000,12000,0)

SELECT * FROM [TABELA DE CLIENTES]

EXEC CalculaIdade


SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE CLIENTES]
WHERE CPF = '123123124'

BEGIN TRANSACTION

DELETE FROM [TABELA DE CLIENTES]
WHERE CPF = '123123124'

COMMIT
GO

--REVISAO E ALGUMAS OBSERVACOES 
--EXEMPLO 3
CREATE PROCEDURE OLA_MUNDO
AS 
BEGIN
	SELECT 'OLÁ MUNDO!!'---> REGRA DE NEGOCIO 
END
GO

EXEC OLA_MUNDO
GO
EXECUTE OLA_MUNDO
GO
OLA_MUNDO
GO

--CONSEGUIMOS VER O CODIGO DESENVOLVIDO DENTRO DA PROCEDURE (REGRA DE NEGOCIO)
SP_HELPTEXT OLA_MUNDO
GO

--EXEMPLO 4
CREATE PROCEDURE OLA_MUNDO_2
WITH ENCRYPTION
AS
BEGIN	
	SELECT 'OLÁ MUNDO'
END

EXEC OLA_MUNDO_2
GO

SP_HELPTEXT OLA_MUNDO_2
GO

--EXEMPLO 5
--RETORNANDO DOIS VALORES 
CREATE PROCEDURE SP_RetornaConsulta
AS
	BEGIN
		SELECT COUNT (*)  FROM [TABELA DE CLIENTES]
		SELECT COUNT (*) FROM [TABELA DE VENDEDORES]
	END
GO

EXEC SP_RetornaConsulta
GO


--EXEMPLO 6 ---
--INSERINDO REGISTROS
--ABRINDO PARENTESES
SELECT * FROM [TABELA DE VENDEDORES_2]

SELECT * FROM [TABELA DE VENDEDORES]

INSERT INTO [TABELA DE VENDEDORES_2] (MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA ADMISSAO],[DE FERIAS],BAIRRO)
SELECT MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA ADMISSAO],[DE FERIAS],BAIRRO  FROM [TABELA DE VENDEDORES]

--DELETANDO TODOS OS REGISTROS DA TABELA DE VENDEDORES 2
TRUNCATE TABLE [TABELA DE VENDEDORES_2]
GO

INSERT INTO [TABELA DE VENDEDORES_2] (MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA ADMISSAO],[DE FERIAS],BAIRRO)
SELECT *  FROM [TABELA DE VENDEDORES]

SELECT * FROM [TABELA DE VENDEDORES_2]

CREATE TABLE TABELA_TESTE (
	MATRICULA VARCHAR (5),
	NOME VARCHAR (100)
)
GO
CREATE PROCEDURE SP_INSERT_TABELA
AS
	BEGIN
		SELECT MATRICULA,NOME FROM [TABELA DE VENDEDORES]
	END
GO

EXEC SP_INSERT_TABELA

INSERT INTO TABELA_TESTE (MATRICULA,NOME)
EXEC SP_INSERT_TABELA

SELECT * FROM TABELA_TESTE

--ANTES DO DESAFIO TEMOS UM PARENTESE PARA ABRIR 
SELECT * FROM [TABELA DE VENDEDORES]

----> 0.5 ---> 50%
----> 1 ---- > 100%
--ANALISE - RESOLUCAO
SELECT * FROM [TABELA DE VENDEDORES]

SELECT TOP 2 * FROM [TABELA DE VENDEDORES]
ORDER BY MATRICULA 

BEGIN TRANSACTION

UPDATE [TABELA DE VENDEDORES]
SET [PERCENTUAL COMISSAO] = 0.08
FROM -- DE ONDE??
(SELECT TOP 2 * FROM [TABELA DE VENDEDORES])AUX
WHERE [TABELA DE VENDEDORES].MATRICULA = AUX.MATRICULA

COMMIT
GO

--DESAFIO 2 DA AULA 19 ------
--ANALISE 
SELECT * FROM [TABELA DE NOTAS FISCAIS]
SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]
SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]


SELECT * FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]
WHERE MONTH (NF.DATA) = 1 AND YEAR (NF.DATA) = 2015 AND TP.[CODIGO DO PRODUTO] = '1002767'

--ANALISE 2
BEGIN TRANSACTION


UPDATE NF
SET NF.IMPOSTO = 0.15
FROM  ---> DE ONDE?
[TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]
WHERE MONTH (NF.DATA) = 1 AND YEAR (NF.DATA) = 2015 AND TP.[CODIGO DO PRODUTO] = '1002767'

ROLLBACK
GO
------------------------
CREATE PROCEDURE AtualizaImposto
@MES INT, @ANO INT, @PRODUTO VARCHAR (20), @IMPOSTO FLOAT
AS
	BEGIN
			UPDATE NF
			SET NF.IMPOSTO = @IMPOSTO
			FROM  ---> DE ONDE?
			[TABELA DE NOTAS FISCAIS]NF
			INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
			ON NF.NUMERO = INF.NUMERO
			INNER JOIN [TABELA DE PRODUTOS]TP
			ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]
			WHERE MONTH (NF.DATA) = @MES AND YEAR (NF.DATA) = @ANO AND TP.[CODIGO DO PRODUTO] = @PRODUTO
	END
GO
--TESTE 
EXEC AtualizaImposto @MES = 1, @ANO = 2015, @PRODUTO = '1002767', @IMPOSTO = 0.18

--VALIDACAO
SELECT NF.NUMERO,TP.[CODIGO DO PRODUTO],NF.DATA,NF.IMPOSTO FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]
WHERE MONTH (NF.DATA) = 1 AND YEAR (NF.DATA) = 2015 AND TP.[CODIGO DO PRODUTO] = '1002767'

--VALIDACAO 2
SELECT NF.NUMERO,NF.IMPOSTO,INF.[CODIGO DO PRODUTO] FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE NF.NUMERO = 110
GO
-------- 

--- EXEMPLO 07 --------
CREATE PROCEDURE BuscaNotasCliente
@CPF VARCHAR (12),
@DATA_INICIAL DATE = '2016-01-01', --> DEFAULT
@DATA_FINAL DATE = '2016-12-31' --> DEFAULT
AS
	BEGIN
		SELECT * FROM [TABELA DE NOTAS FISCAIS] 
		WHERE CPF=@CPF AND DATA >=@DATA_INICIAL AND DATA <=@DATA_FINAL
	END

EXEC BuscaNotasCliente @CPF = '19290992743'
GO

--- EXEMPLO 07 --------
CREATE PROCEDURE BuscaNotasCliente
@CPF VARCHAR (12),
@DATA_INICIAL DATE = '2016-01-01', --> DEFAULT
@DATA_FINAL DATE = '2016-12-31' --> DEFAULT
AS
	BEGIN
		SELECT * FROM [TABELA DE NOTAS FISCAIS] 
		WHERE CPF=@CPF AND DATA >=@DATA_INICIAL AND DATA <=@DATA_FINAL
	END

--TESTANDO A PROCEDURE
EXEC BuscaNotasCliente @CPF = '19290992743'
EXEC BuscaNotasCliente @CPF = '19290992743', @DATA_INICIAL = '2016-12-01'
EXEC BuscaNotasCliente @CPF = '19290992743', @DATA_FINAL = '2016-01-31'
EXEC BuscaNotasCliente @DATA_FINAL = '2016-12-31',@CPF = '19290992743',@DATA_INICIAL = '2016-12-01'

EXEC BuscaNotasCliente '19290992743'
EXEC BuscaNotasCliente '19290992743','2016-12-01'
EXEC BuscaNotasCliente '19290992743','2016-12-01','2016-12-15'
EXEC BuscaNotasCliente '19290992743',DEFAULT,'2016-12-31'

EXECUTE BuscaNotasCliente '19290992743'
GO
BuscaNotasCliente '19290992743'
GO
BuscaNotasCliente '19290992743','2016-12-01'
GO
BuscaNotasCliente '19290992743',DEFAULT,'2016-12-31'


---EXCLUINDO PROCEDURE
DROP PROCEDURE BuscaNotasCliente
GO


--ALTERANDO A PROCEDURE
ALTER PROCEDURE BuscaNotasCliente
@CPF VARCHAR (12),
@DATA_INICIAL DATE = '2016-01-01', --> DEFAULT
@DATA_FINAL DATE = '2016-12-31' --> DEFAULT
AS
	BEGIN
		SELECT * FROM [TABELA DE NOTAS FISCAIS] 
		WHERE CPF=@CPF AND DATA >=@DATA_INICIAL AND DATA <=@DATA_FINAL
	END
GO

--- EXEMPLO 08  PROCEDURE DE SISTEMA --------
EXEC sp_columns @TABLE_NAME = 'TABELA DE CLIENTES',@TABLE_OWNER = 'DBO'
GO
EXEC sp_tables @TABLE_NAME = 'TAB%', @TABLE_OWNER = 'DBO',@TABLE_QUALIFIER = 'ESQUINA_VENDAS'
GO
-------------------------------------------

-----EXEMPLO 9 - ENTRADA DE TABELA ---
--ARRAY
--ANALISE 1
SELECT * FROM [TABELA DE NOTAS FISCAIS]
SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]
SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON NF.CPF = TC.CPF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR (NF.DATA)= 2015


SELECT TC.CPF,TC.NOME, SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON NF.CPF = TC.CPF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR (NF.DATA)= 2015
GROUP BY TC.CPF,TC.NOME
GO

---- ABERTURA DE PARENTESE ---
--TYPE (TIPO)
--CRIANDO TIPO
CREATE TYPE IDENTIFICADORES 
FROM VARCHAR (20) NOT NULL

--TESTANDO O TIP
DECLARE @TESTE IDENTIFICADORES
SET @TESTE =  'TESTANDO ...'
PRINT @TESTE

--EXECLUINDO O TIPO
DROP TYPE IDENTIFICADORES

--CRIANDO A LISTA DE CLIENTES
CREATE TYPE ListaClientes AS TABLE
(CPF VARCHAR (12) NOT NULL)


--ANALISE 2
SELECT * FROM [TABELA DE CLIENTES]

DECLARE @LISTA ListaClientes
INSERT INTO @LISTA (CPF) VALUES ('5576228758'),('8502682733'),('9283760794')
SELECT * FROM @LISTA
GO

-- ANALISE 3
DECLARE @LISTA ListaClientes
INSERT INTO @LISTA (CPF) VALUES ('5576228758'),('8502682733'),('9283760794')

SELECT TC.CPF,TC.NOME, SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON NF.CPF = TC.CPF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN @LISTA L ---> INNER JOIN ??? -->OS REGISTROS EM COMUM  
ON L.CPF = TC.CPF
WHERE YEAR (NF.DATA)= 2015
GROUP BY TC.CPF,TC.NOME
GO
--CRIAR A PROCEDURE
CREATE PROCEDURE FaturamentoClientes
@LISTA ListaClientes READONLY,
@ANO INT
AS 
	BEGIN
			SELECT TC.CPF,TC.NOME, SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE CLIENTES]TC
			INNER JOIN [TABELA DE NOTAS FISCAIS]NF
			ON NF.CPF = TC.CPF
			INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
			ON NF.NUMERO = INF.NUMERO
			INNER JOIN @LISTA L ---> INNER JOIN ??? -->OS REGISTROS EM COMUM  
			ON L.CPF = TC.CPF
			WHERE YEAR (NF.DATA)= @ANO
			GROUP BY TC.CPF,TC.NOME
	END
GO
--TESTANDO A PROCEDURE
DECLARE @LISTAS ListaClientes
INSERT INTO @LISTAS (CPF) VALUES ('5576228758'),('8502682733'),('9283760794')

EXEC FaturamentoClientes @LISTA = @LISTAS, @ANO=2015


--DESAFIO 03 
--CONSULTA DO DESAFIO 
--ANALISE  1
SELECT * FROM [TABELA DE NOTAS FISCAIS]

SELECT DATA, COUNT(*) AS NUMERO FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA IN ('2015-01-01','2015-01-02')
GROUP BY DATA
GO

--ANALISE 2
SELECT DATANOTA FROM @ListaDatas
--CRIANDO UM ESTRUTURA DO TIPO TYPE
CREATE TYPE ListaDatas AS TABLE (
	DATANOTA DATE  NOT NULL
)

SELECT * FROM [TABELA DE NOTAS FISCAIS]

DECLARE @LISTADATAS ListaDatas
INSERT INTO @LISTADATAS (DATANOTA) VALUES ('2015-01-01'),('2015-01-02'),('2015-01-03'),('2015-01-04')
SELECT DATANOTA FROM @LISTADATAS
GO
--ANALISE 3
DECLARE @LISTADATAS ListaDatas
INSERT INTO @LISTADATAS (DATANOTA) VALUES ('2015-01-01'),('2015-01-02'),('2015-01-03'),('2015-01-04')

SELECT DATA, COUNT(*) AS NUMERO FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA IN (SELECT DATANOTA FROM @LISTADATAS)
GROUP BY DATA
go

---CRIANDO A PROCEDURE
CREATE PROCEDURE ListaNumeroNotas
@LISTADATAS ListaDatas READONLY
AS
	BEGIN
			SELECT DATA, COUNT(*) AS NUMERO FROM [TABELA DE NOTAS FISCAIS]
			WHERE DATA IN (SELECT DATANOTA FROM @LISTADATAS)
			GROUP BY DATA
	END
GO
--TESTAR PROCEDURE
DECLARE @LISTADATAS ListaDatas
INSERT INTO @LISTADATAS (DATANOTA) VALUES ('2015-01-01'),('2015-01-02'),('2015-01-03'),('2015-01-04')

EXEC ListaNumeroNotas @LISTADATAS = @LISTADATAS
GO

--EXEMPLO 10 --> COM PARAMETRO DE SAIDA
CREATE PROCEDURE SP_CALCULO @X INT, @Y INT OUTPUT --> VARIAVEL POR REFERENCIA
AS
	BEGIN
		SET @Y = @X * 2  ---> 10 * 2 = 20
	END
GO
--TESTANDO O EXEMPLE 10
DECLARE @RESULTADO INT
EXEC SP_CALCULO 10,@RESULTADO OUTPUT
SELECT @RESULTADO
GO

DECLARE @RESULTADO INT
EXEC SP_CALCULO 20,@RESULTADO OUTPUT
SELECT @RESULTADO*100
GO

--EXEMPLO 11
--ANALISE 1
SELECT * FROM [TABELA DE NOTAS FISCAIS]
SELECT * FROM [TABELA DE CLIENTES]

SELECT COUNT (*) FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '19290992743' AND YEAR (DATA) = 2016

--ANALISE 2
SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO

SELECT SUM (INF.QUANTIDADE*INF.PRECO) FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
WHERE CPF = '19290992743' AND YEAR (DATA) = 2016 

--CONCLUSAO
SELECT COUNT (*) FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '19290992743' AND YEAR (DATA) = 2016

SELECT SUM (INF.QUANTIDADE*INF.PRECO) FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
WHERE CPF = '19290992743' AND YEAR (DATA) = 2016 
GO
--CRIACAO DA PROCEDURE
CREATE PROCEDURE RetornaValores
@CPF VARCHAR (12),@ANO INT,
--PASSANDO COMO REFERENCIA
@QTD_NOTAS INT OUTPUT,
@FATURAMENTO FLOAT OUTPUT
AS 
	BEGIN
		SELECT @QTD_NOTAS =  COUNT (*) FROM [TABELA DE NOTAS FISCAIS]
		WHERE CPF = @CPF AND YEAR (DATA) = @ANO

		SELECT @FATURAMENTO = SUM (INF.QUANTIDADE*INF.PRECO) FROM [TABELA DE ITENS NOTAS FISCAIS]INF
		INNER JOIN [TABELA DE NOTAS FISCAIS]NF
		ON INF.NUMERO = NF.NUMERO
		WHERE CPF = @CPF AND YEAR (DATA) = @ANO 
	END
GO

--TESTANDO A PROCEDURE DO EXEMPLO 11
DECLARE @QTD_NOTAS  INT, @FATURAMENTO FLOAT 
DECLARE @CPF VARCHAR(12), @ANO INT

SET @CPF = '19290992743'
SET @ANO = 2016

EXEC RetornaValores @CPF=@CPF,@ANO=@ANO,@QTD_NOTAS=@QTD_NOTAS OUTPUT,@FATURAMENTO=@FATURAMENTO OUTPUT

SELECT @QTD_NOTAS,@FATURAMENTO


--------------------  AULA 20 - INTRODUCAO E ESTRUTURA DA BASE DE DADOS ---

USE model

CREATE TABLE TESTE (
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR (20) NOT NULL
)
GO

DROP TABLE TESTE
GO

CREATE PROCEDURE TESTE_PROCEDURE
AS
	BEGIN
			
			SELECT * FROM ESQUINA_VENDAS.dbo.[TABELA DE ITENS NOTAS FISCAIS]

	END
GO

DROP PROCEDURE TESTE_PROCEDURE


CREATE DATABASE SISTEMA_X
GO
DROP DATABASE SISTEMA_X



USE ESQUINA_VENDAS


--TIPO 0 --> DADOS
--TIPO 1  --> LOG DE TRANSACAO
SELECT * FROM SYS.database_files


CREATE DATABASE SISTEMA_A 


USE SISTEMA_A
SELECT * FROM SYS.database_files


--CRIACAO DO BANCO COM PARAMETROS 

CREATE DATABASE SISTEMA_B 
ON PRIMARY 
( NAME = SISTEMA_B,	FILENAME = 'F:\temp\SISTEMA_B.mdf', SIZE = 100MB, MAXSIZE=200MB,FILEGROWTH = 20MB),

(NAME = SISTEMA_B_2,FILENAME = 'F:\temp\SISTEMA_B_2.ndf', SIZE = 100MB, MAXSIZE=200MB,FILEGROWTH = 20MB)

LOG ON( NAME = SISTEMA_B_LOG,	FILENAME = 'F:\temp\SISTEMA_B_LOG.ldf', SIZE = 100MB, MAXSIZE=200MB,FILEGROWTH = 20MB)



CREATE DATABASE SISTEMA_C 
ON PRIMARY 
( NAME = SISTEMA_C,	FILENAME = 'F:\temp\DISCO C\SISTEMA_C.mdf', SIZE = 100MB, MAXSIZE=200MB,FILEGROWTH = 20MB),

(NAME = SISTEMA_B_2,FILENAME = 'F:\temp\DISCO C\SISTEMA_C_2.ndf', SIZE = 100MB, MAXSIZE=200MB,FILEGROWTH = 20MB)

LOG ON( NAME = SISTEMA_B_LOG,	FILENAME = 'F:\temp\DISCO E\SISTEMA_B_LOG.ldf', SIZE = 100MB, MAXSIZE=200MB,FILEGROWTH = 20MB)




USE ESQUINA_VENDAS
GO
ALTER DATABASE ESQUINA_VENDAS SET SINGLE_USER
GO


--A opção NOTRUNCATE faz com que o espaço liberado, seja mantido no Banco de Dados e não liberado para o Sistema Operacional. 
DBCC SHRINKDATABASE ('ESQUINA_VENDAS',NOTRUNCATE)
-- a opção TRUNCATE ONLY, o espaço liberado é retornado para o Sistema Operacional.
DBCC SHRINKDATABASE ('ESQUINA_VENDAS',TRUNCATEONLY)

ALTER DATABASE ESQUINA_VENDAS SET MULTI_USER 
GO


----------------------- BACKUP DO BANCO DE DADOS -----------------------------------------------


USE ESQUINA_VENDAS
GO
--SEM POLITICA DE BACKUP
BACKUP DATABASE ESQUINA_VENDAS TO DISK = 'E:\TEMP SQL\ESQUINA_VENDAS.BAK' 

--DESAFIO: REALIZE O BACKUP DO SISTEMA C

BACKUP DATABASE SISTEMA_C TO DISK = 'E:\TEMP SQL\SISTEMA_C.BAK' 


--COMO INICIO DE POLIKTICA DE BACKUP
BACKUP DATABASE ESQUINA_VENDAS TO DISK = 'E:\TEMP SQL\ESQUINA_VENDAS.BAK' WITH INIT




--SEM POLITICAS INICIAIS DE BACKUP
USE ESQUINA_VENDAS
GO

--SEM POLITICA DE BACKUP 
BACKUP DATABASE ESQUINA_VENDAS TO DISK  = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK'

--INICIO DE UMA POLITICA DE BACKUP
BACKUP DATABASE ESQUINA_VENDAS TO DISK  = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH INIT

-- A CLAUSULA COMPRESSION  COMPRIME O TAMANHO DO BACKUP
BACKUP DATABASE ESQUINA_VENDAS TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS2.BAK' WITH COMPRESSION

EXEC CriarNotaFiscal '20211004'
GO

SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '20211004'
GO

BACKUP LOG ESQUINA_VENDAS TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS_LOG1.BAK'
-- EXCLUINDO O ARQUIVO DE BACKUP NO DIRETORIO PELO  T-SQL ----

--ADICIONANDO UM DISPOSITIVO DE BACKUP A UMA INSTANCIA DO SQL SERVER
EXEC SP_ADDUMPDEVICE 'DISK', 'ESQUINA_VENDAS.BAK', 'F:\temp\Disco E\ESQUINA_VENDAS.BAK'

--CONTEM CADA DISPOSITIVO DE BACKUP REGISTRADO USANDO O SP_ADDUMPDEVICE
SELECT * FROM sys.backup_devices
GO

EXEC sp_dropdevice 'ESQUINA_VENDAS.BAK','DELFILE'
GO
-------------------------------------------------------------------------

EXEC CriarNotaFiscal '20211008'
GO

SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '20211008'
GO

--------------------------------------------------------------------------
--INICIANDO A POLITICA DE BACKUP
BACKUP DATABASE ESQUINA_VENDAS  TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH INIT
BACKUP LOG ESQUINA_VENDAS TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH NOINIT
BACKUP LOG ESQUINA_VENDAS TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH NOINIT
BACKUP DATABASE ESQUINA_VENDAS TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH DIFFERENTIAL
-----------------------------------------------------------------------------------------------
------RESTAURACAO DO BANCO ---------------------------
--VERIFICANDO O STATUS DO ARQUIVO 
RESTORE VERIFYONLY  FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK'

--VERIFICANDO OS BACKUPS NO ARQUIVO
RESTORE HEADERONLY FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK'

--INICIANDO A POLITICA DE BACKUP
BACKUP DATABASE ESQUINA_VENDAS  TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH INIT
BACKUP LOG ESQUINA_VENDAS TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH NOINIT
BACKUP LOG ESQUINA_VENDAS TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH NOINIT
BACKUP DATABASE ESQUINA_VENDAS TO DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH DIFFERENTIAL
-----------------------------------------------------------------------------------------------
------RESTAURACAO DO BANCO ---------------------------
--VERIFICANDO O STATUS DO ARQUIVO 
RESTORE VERIFYONLY  FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK'

--VERIFICANDO OS BACKUPS NO ARQUIVO
RESTORE HEADERONLY FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK'

USE master
---RESTAURACAO 1
RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 1, NORECOVERY
RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 4, RECOVERY

USE ESQUINA_VENDAS
SELECT * FROM [TABELA DE NOTAS FISCAIS]
ORDER BY DATA DESC

--RESTAURACAO 2
RESTORE HEADERONLY FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK'

RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 1, NORECOVERY
RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 2, RECOVERY

--RESTAURACAO 3
RESTORE HEADERONLY FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK'

RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 1, NORECOVERY
RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 2, NORECOVERY
RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 3, RECOVERY

--RESTAURACAO 4
RESTORE HEADERONLY FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK'
USE master

ALTER DATABASE ESQUINA_VENDAS SET SINGLE_USER WITH ROLLBACK IMMEDIATE

RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 1, NORECOVERY,REPLACE
RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 2, NORECOVERY
RESTORE DATABASE ESQUINA_VENDAS FROM DISK = 'F:\temp\Disco E\ESQUINA_VENDAS.BAK' WITH FILE = 3, RECOVERY

ALTER DATABASE ESQUINA_VENDAS SET MULTI_USER WITH ROLLBACK IMMEDIATE

-- EXEMPLO 1 - BACKUP DE TESTE --- 
CREATE DATABASE TESTE

USE TESTE

CREATE TABLE TESTE (
	NOME VARCHAR (15) NOT NULL,
	DATA DATETIME NOT NULL
)

INSERT INTO TESTE (NOME,DATA)
VALUES ('A',GETDATE())

INSERT INTO TESTE (NOME,DATA)
VALUES ('B',GETDATE())

SELECT * FROM TESTE
--BACKUP FULL
BACKUP DATABASE TESTE TO DISK = 'F:\temp\Disco E\TESTE.BAK' WITH INIT 

INSERT INTO TESTE (NOME,DATA)
VALUES ('C',GETDATE())

INSERT INTO TESTE (NOME,DATA)
VALUES ('D',GETDATE())

SELECT * FROM TESTE
--BACKUP FULL
BACKUP DATABASE TESTE TO DISK = 'F:\temp\Disco E\TESTE.BAK' WITH NOINIT 


INSERT INTO TESTE (NOME,DATA)
VALUES ('E',GETDATE())

INSERT INTO TESTE (NOME,DATA)
VALUES ('F',GETDATE())

SELECT * FROM TESTE

--BACKUP DE TRANSACAO
BACKUP LOG TESTE TO DISK = 'F:\temp\Disco E\TESTE.BAK' WITH NOINIT 

INSERT INTO TESTE (NOME,DATA)
VALUES ('G',GETDATE())

INSERT INTO TESTE (NOME,DATA)
VALUES ('H',GETDATE())

SELECT * FROM TESTE

--BACKUP DE TRANSACAO
BACKUP LOG TESTE TO DISK = 'F:\temp\Disco E\TESTE.BAK' WITH NOINIT 

INSERT INTO TESTE (NOME,DATA)
VALUES ('I',GETDATE())

INSERT INTO TESTE (NOME,DATA)
VALUES ('J',GETDATE())

SELECT * FROM TESTE

--BACKUP DIRERENCIAL
BACKUP DATABASE TESTE TO DISK = 'F:\temp\Disco E\TESTE.BAK' WITH DIFFERENTIAL

RESTORE VERIFYONLY  FROM DISK = 'F:\temp\Disco E\TESTE.BAK'

RESTORE HEADERONLY FROM DISK = 'F:\temp\Disco E\TESTE.BAK'

USE master

DROP DATABASE TESTE

--RESTAURACAO 1
RESTORE DATABASE TESTE FROM DISK = 'F:\temp\Disco E\TESTE.BAK' WITH FILE = 2, RECOVERY
USE TESTE
SELECT * FROM TESTE

USE master
DROP DATABASE TESTE

--RESTAURACAO 2
RESTORE HEADERONLY FROM DISK = 'F:\temp\Disco E\TESTE.BAK'
RESTORE DATABASE TESTE FROM DISK = 'F:\temp\Disco E\TESTE.BAK' WITH FILE = 1, RECOVERY
USE TESTE
SELECT * FROM TESTE

--RESTAURACAO 3
USE master
DROP DATABASE TESTE
RESTORE HEADERONLY FROM DISK = 'F:\temp\Disco E\TESTE.BAK'
RESTORE DATABASE TESTE FROM DISK = 'F:\temp\Disco E\TESTE.BAK' WITH FILE = 1,  NORECOVERY
RESTORE DATABASE TESTE FROM DISK = 'F:\temp\Disco E\TESTE.BAK' WITH FILE = 3,  NORECOVERY
RESTORE DATABASE TESTE FROM DISK = 'F:\temp\Disco E\TESTE.BAK' WITH FILE = 4,  RECOVERY
USE TESTE

SELECT * FROM TESTE


---SEGUNDO EXEMPLO DE POLITICA BACKUP 
--CRIANDO A BASE DE DADOS
CREATE DATABASE TESTE_BACKUP
USE TESTE_BACKUP

--TABELA DE CONTROLE 
CREATE TABLE CRT_TABELA (
	POS INT
)

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (1)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

--1:00 --> BACKUP FULL INICIAL
BACKUP DATABASE TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH INIT

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (2)

--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA
-- 4:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (3)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

-- 6:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (4)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

-- 8:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (5)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

--9:00 --> BACKUP DIFERENCIAL
BACKUP DATABASE TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH DIFFERENTIAL

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (6)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

-- 10:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (7)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

-- 12:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (8)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

-- 14:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (9)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

--14:00 --> BACKUP DIFERENCIAL
BACKUP DATABASE TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH DIFFERENTIAL

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (10)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

-- 15:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (11)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

-- 17:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT

--***************** 17:30 (PROBLEMA!!!!!) ****************

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (12)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

-- 19:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO
INSERT INTO CRT_TABELA VALUES (13)
--SELECIONANDO REGISTRO
SELECT * FROM CRT_TABELA

-- 21:00 --> BACKUP LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH NOINIT


SELECT * FROM CRT_TABELA 

RESTORE VERIFYONLY  FROM DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK'

RESTORE HEADERONLY FROM DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK'

USE master
DROP DATABASE  TESTE_BACKUP

--1:00 -- BKP_FULL INICIAL
RESTORE DATABASE TESTE_BACKUP FROM DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH FILE = 1, NORECOVERY
--14:00 --> BKP_DIFERENCIAL
RESTORE DATABASE TESTE_BACKUP FROM DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH FILE = 9, NORECOVERY
-- 15:00 --> BACKUP LOG TRANSACAO
RESTORE DATABASE TESTE_BACKUP FROM DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH FILE = 10, NORECOVERY
-- 17:00 --> BACKUP LOG TRANSACAO
RESTORE DATABASE TESTE_BACKUP FROM DISK = 'F:\temp\Disco E\TESTE_BACKUP.BAK' WITH FILE = 11, RECOVERY

--ANALISANDO A RESTAURACAO DA BASE --
USE TESTE_BACKUP

SELECT * FROM CRT_TABELA


--NO MANAGEMENT STUDIO FOI CRIADO JOBS PARA A POLITICA DE BACKUP CONFORME A SIMULACAO ACIMA NA BASE DE DADOS: ESQUINA_VENDAS
--FOI REALIZADO O BACPAC (APLICATIVO DA CAMADA DE DADOS) PELO MANAGEMENT STUDIO


- AULA 21 -  SEGURANÇA ---

CREATE LOGIN [DESKTOP-OSV2FHF\Pedro] FROM WINDOWS 
GO
--EXCLUINDO O LOGIN PEDRO
DROP LOGIN [DESKTOP-OSV2FHF\Pedro]

--ERRO POIS O USUARIO NAO EXISTE NO SISTEMA OPERACIONAL
CREATE LOGIN [DESKTOP-OSV2FHF\Maite] FROM WINDOWS 


CREATE LOGIN [DESKTOP-OSV2FHF\Luciano] FROM WINDOWS
GO

DROP LOGIN [DESKTOP-OSV2FHF\Luciano]
GO

DROP LOGIN [DESKTOP-OSV2FHF\Sara]
GO

--CRIANDO LOGIN PARA UM GRUPO DO SISTEMA OPERACIONAL
CREATE LOGIN [DESKTOP-OSV2FHF\TIME DBA] FROM WINDOWS
GO
DROP LOGIN [DESKTOP-OSV2FHF\TIME DBA]  

--CRIANDO LOGIN NO SQL SERVER
CREATE LOGIN Gabriel WITH PASSWORD = 'gabriel@123'
GO

--CRIANDO LOGIN NO SQL SERVER
CREATE LOGIN Samara WITH PASSWORD = 'samara@123'
GO

--EXCLUIR LOGIN SQL SERVER
DROP LOGIN Gabriel
go


--EXCLUIR LOGIN SQL SERVER
DROP LOGIN  Samara
GO

--CRIANDO LOGIN SQL SERVER
CREATE LOGIN Renata WITH PASSWORD = 'renata@123'

-- CRIANDO UMA CREDENCIAL
CREATE CREDENTIAL TESTE
	WITH IDENTITY = 'Sara',
	SECRET = '123'
GO
-- EXCLUINDO UMA CREDENCIAL
DROP CREDENTIAL TESTE
GO

--TENTANDO EXCLUIR O LOGIN RENATA
DROP LOGIN Renata

-- OBS.: QUANDO TEMOS UMA CREDENCIAL MAPEADA EM LOGON, NÃO CONSEGUIMOS EXCLUI-LA


CREATE LOGIN Renata WITH PASSWORD = 'renata@123'
GO
--LINKED SERVER  (SERVIDORES VINCULADOS)
-- SQL SEVER  (MESMO SGBD)
-- ORACLE
-- MYSQL

-- CRIANDO LINKED SERVER PARA A MESMA INSTANCIA 
SP_ADDLINKEDSERVER
@SERVER = 'SERVER_1',
@SRVPRODUCT = '',
@PROVIDER = 'SQLNCLI',
@DATASRC = 'LOCALHOST'
GO

--VERIFICA OS SERVIDORES NO SEU AMBIENTE 
SELECT * FROM sys.servers

SELECT * FROM [TABELA DE VENDEDORES]
GO

SELECT * FROM SERVER_1.ESQUINA_VENDAS.DBO.[TABELA DE VENDEDORES]
GO
--ACEITAM O DESAFIO DE CRIAR UMA NOVA INSTANCIA??
--CRIAMOS A SEGUNDA INSTANCIA

--CRIACAO DO SERVER_2
SP_ADDLINKEDSERVER
@SERVER = 'SERVER_2',
@SRVPRODUCT = '',
@PROVIDER = 'SQLNCLI',
@DATASRC = 'DESKTOP-OSV2FHF\MSSQLSERVER_2'
GO

--ADICIONAR O LOGIN
SP_ADDLINKEDSRVLOGIN
@RMTSRVNAME = 'SERVER_2',
@USESELF='FALSE',
@LOCALLOGIN = NULL,
@RMTUSER = 'Rodrigo',
@RMTPASSWORD = 'rodrigo@123'
GO

--VERIFICA OS SERVIDORES NO SEU AMBIENTE 
SELECT * FROM  sys.SERVERS
GO


--SELECIONANDO REGISTROS NO SERVER_2
SELECT * FROM SERVER_2.ESQUINA_TESTE.DBO.VENDEDORES


--INSERINDO REGISTRO NO SERVER_2
INSERT INTO SERVER_2.ESQUINA_TESTE.DBO.VENDEDORES (MATRICULA,NOME,
[PERCENTUAL COMISSAO], [DATA ADMISSAO], [DE FERIAS],BAIRRO)
SELECT * FROM ESQUINA_VENDAS.dbo.[TABELA DE VENDEDORES]



--VERIFICA OS SERVIDORES NO SEU AMBIENTE 
SELECT * FROM  sys.SERVERS
GO


--SELECIONANDO REGISTROS NO SERVER_2
SELECT * FROM SERVER_2.ESQUINA_TESTE.DBO.VENDEDORES


--INSERINDO REGISTRO NO SERVER_2
INSERT INTO SERVER_2.ESQUINA_TESTE.DBO.VENDEDORES (MATRICULA,NOME,
[PERCENTUAL COMISSAO], [DATA ADMISSAO], [DE FERIAS],BAIRRO)
SELECT * FROM ESQUINA_VENDAS.dbo.[TABELA DE VENDEDORES]


-- 2 - SEGURANCA ---> USUARIOS, CONEXAO DO SQL SERVER 

--LOGINS DO SQL SERVER INTERNO
SELECT * FROM sys.sql_logins

--PEGANDO SOMENTE OS ATIVOS 
SELECT * FROM sys.sql_logins
WHERE is_disabled <> 1

--ALGUNS EXEMPLOS DE TABELAS DE SISTEMA
USE ESQUINA_VENDAS
SELECT * FROM sys.foreign_keys

SELECT * FROM SYSOBJECTS 

-----------------------------
SELECT * FROM sys.foreign_keys FK
INNER JOIN SYSOBJECTS SO
ON FK.parent_object_id = SO.id

-----------------------------
SELECT FK.name,FK.type_desc,FK.create_date,SO.name FROM sys.foreign_keys FK
INNER JOIN SYSOBJECTS SO
ON FK.parent_object_id = SO.id

--------------------------------------------
--LOGINS DE INSTANCIA
SELECT * FROM sys.server_principals
WHERE type_desc IN ('SQL_LOGIN','WINDOWS_LOGIN') AND is_disabled = 0 

-----------------------------------------
SELECT * FROM sys.servers
----------------------------------------

SELECT * FROM sys.syslogins SL
INNER JOIN sys.sql_logins L
ON SL.sid = L.sid
---------------------------------------

SELECT * FROM sys.syslogins SL
LEFT JOIN sys.sql_logins L
ON SL.sid = L.sid

------------------------------------------------

--TEMOS A DATA E HORA DOS LOGINS QUE FORAM CRIADOS 
SELECT NAME , LOGINPROPERTY(name,'PasswordLastSetTime') AS 'DATA DA CRIACAO'  FROM SYS.SQL_LOGINS

--RETORNAR O HASH DA SENHA 
SELECT NAME , LOGINPROPERTY(name,'PasswordHash') AS 'SENHA HASH'  FROM SYS.SQL_LOGINS ---> SHA - SECURE HASHING ALGORITHM

--TEMOS VERSOES 
--SHA 0
--SHA-1
--SHA-2   ---> 256 ATE 512
SELECT NAME , LOGINPROPERTY(name,'PasswordHashAlgorithm') AS 'SENHA HASH'  FROM SYS.SQL_LOGINS ---> SHA - SECURE HASHING ALGORITHM
GO
--MOSTRAR UM POUCO SOBRE CRIPTOGRAFIAS 
DECLARE @TABELA_HASH TABLE (TIPO NVARCHAR(MAX) )
INSERT INTO @TABELA_HASH (TIPO)
VALUES ('1'),('1'),('1')

SELECT 
	HASHBYTES ('MD2',TIPO) AS 'MD2',
	HASHBYTES ('SHA1',TIPO) AS 'SHA1',
	HASHBYTES ('SHA2_256',TIPO) AS 'SHA2_256',
	HASHBYTES ('SHA2_512',TIPO) AS 'SHA2_512'
FROM @TABELA_HASH
GO

CREATE LOGIN ROGERIO WITH PASSWORD = '123'

CREATE LOGIN EMANUEL WITH PASSWORD = '123'

SELECT * FROM sys.sql_logins

SELECT NAME,password_hash FROM sys.sql_logins
WHERE PWDCOMPARE ('123',password_hash) = 1 --1 SE EXISTE E 0 --> ELE NAO EXISTE
GO
--Fornece informacoes sobre logons e os usuarios associados com estes logins em cada banco de dados 
SP_HELPLOGINS 'EMANUEL'
GO

SP_HELPLOGINS 'DESKTOP-OSV2FHF\marci'

--LOGIN --> SERVIDOR
--USER ---> BANCO DE DADOS


--AUTORIZACOES 
--AUTORIZANDO
ALTER SERVER ROLE [DBCREATOR] ADD MEMBER [ROGERIO]
--REMOVENDO
ALTER SERVER ROLE [DBCREATOR] DROP MEMBER [ROGERIO]

SELECT * FROM sys.fn_builtin_permissions ('')
WHERE class_desc = 'SERVER'

SELECT * FROM sys.fn_builtin_permissions ('')
WHERE class_desc = 'DATABASE'

--ASSOCIACAO DE LOGIN COM USUARIO
--criacao do login
CREATE LOGIN FRANCISCO WITH PASSWORD = 'francisco@123'

--CRIACAO DO USUARIO ASSOCIADO AO LOGIN FRANCISCO
CREATE USER FRANCISCO FOR LOGIN FRANCISCO

DROP USER FRANCISCO
GO

SP_ADDROLEMEMBER 'DB_DATAWRITER','FRANCISCO'

--COM USUARIO FRANCISCO (ATIVIDADES)
CREATE DATABASE  NOVO_BD

CREATE DATABASE  NOVO_BD_2

SELECT * FROM [TABELA DE VENDEDORES]


INSERT INTO [TABELA DE VENDEDORES] (MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA ADMISSAO],[DE FERIAS],BAIRRO)
VALUES ('00243', 'Pedro Rocha',0.11,'2013-09-17',0,'Tijuca') 


--USUARIO DA CONSULTA
SELECT SYSTEM_USER
-- SIMULACAO --
--PASSO 1: CRIAR TRES BASES DE DADOS
CREATE DATABASE BD_1
GO
CREATE DATABASE BD_2
GO
CREATE DATABASE BD_3
GO

--PASSO 2: CRIACAO DOS DBA'S
--DBA_BD_1 --> SENHA = qwe123 ---> BD_1
--DBA_BD_2 --> SENHA = qwe123 ---> BD_2
--DBA_BD_3 --> SENHA = qwe123 ---> BD_3

-- O LOGIN ESTA RELACIONADO AO SERVIDOR 
CREATE LOGIN DBA_BD_1 WITH PASSWORD = 'qwe123'
GO
CREATE LOGIN DBA_BD_2 WITH PASSWORD = 'qwe123'
GO
CREATE LOGIN DBA_BD_3 WITH PASSWORD = 'qwe123'
GO

--PASSO 3: CRIACAO DE DE TRES LOGINS PARA OS USUARIOS

--USUARIOS ELES TERAO ACESSO A NIVEL COMUM 
--USER_1  --> SENHA = u@123 ---> BD_1
--USER_2  --> SENHA = u@123 ---> BD_2
--USER_3  --> SENHA = u@123 ---> BD_3

CREATE LOGIN USER_1 WITH PASSWORD = 'u@123'
GO
CREATE LOGIN USER_2 WITH PASSWORD = 'u@123'
GO
CREATE LOGIN USER_3 WITH PASSWORD = 'u@123'
GO

--INFORMACOES DO BANCO DE DADOS
SP_HELPDB BD_1
GO

--PASSO 4: PERMISSOES E AUTORIZACOES 
ALTER AUTHORIZATION ON DATABASE :: BD_1 TO DBA_BD_1
GO
ALTER SERVER ROLE [SECURITYADMIN] ADD MEMBER DBA_BD_1
GO
USE ESQUINA_VENDAS
GO
CREATE USER DBA_BD_1 FOR LOGIN DBA_BD_1
GO
SP_ADDROLEMEMBER 'DB_DATAREADER','DBA_BD_1' 
GO

-- BD_2 
ALTER AUTHORIZATION ON DATABASE :: BD_2 TO DBA_BD_2
GO
ALTER SERVER ROLE [SECURITYADMIN] ADD MEMBER DBA_BD_2
GO
USE ESQUINA_VENDAS
GO
CREATE USER DBA_BD_2 FOR LOGIN DBA_BD_2
GO
SP_ADDROLEMEMBER 'DB_DATAREADER','DBA_BD_2' 
GO
--------------------------------------------------------
-- LOGADO COM DBA_BD_1

SELECT SYSTEM_USER
GO

USE ESQUINA_VENDAS
GO

SELECT * FROM [TABELA DE VENDEDORES]

--DAR ACESSO PARA O USER_1
USE BD_1
GO

--CRIANDO USUARIO PARA O LOGIN NO BANCO DB_1
CREATE USER [USER_1] FOR LOGIN USER_1
GO

--FAZENDO COM QUE O USUARIO SEJA SOMENTE LEITOR DO BANCO BD_1
SP_ADDROLEMEMBER 'DB_DATAREADER','USER_1'
GO
--REMOVE A ROLE MEMBER
SP_DROPROLEMEMBER 'DB_DATAREADER','USER_1'
GO

--CRIANDO DUAS TABELAS 
USE BD_1
GO
--CRIACAO DA TABELA VENDEDORES
CREATE TABLE [VENDEDORES](
	[MATRICULA] [varchar](5) NOT NULL,
	[NOME] [varchar](100) NULL,
	[PERCENTUAL COMISSAO] [float] NULL,
	[DATA ADMISSAO] [date] NULL,
	[DE FERIAS] [bit] NULL,
	[BAIRRO] [varchar](50) NULL,
	CONSTRAINT [PK_VENDEDORES] PRIMARY KEY (MATRICULA) 
)
GO

--INSERINDO REGISTRO NA TABELA VENDEDORES
INSERT INTO VENDEDORES (MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA ADMISSAO],[DE FERIAS],BAIRRO)
SELECT * FROM ESQUINA_VENDAS.dbo.[TABELA DE VENDEDORES]
GO
SELECT * FROM VENDEDORES
GO


--CRIACAO DA TABELA DE CLIENTES
CREATE TABLE  [CLIENTES](
	[CPF] [varchar](11) NOT NULL,
	[NOME] [varchar](100) NULL,
	[ENDERECO] [varchar](150) NULL,
	[COMPLEMENTO] [varchar](150) NULL,
	[BAIRRO] [varchar](50) NULL,
	[CIDADE] [varchar](50) NULL,
	[ESTADO] [varchar](2) NULL,
	[CEP] [varchar](8) NULL,
	[DATA DE NASCIMENTO] [date] NULL,
	[IDADE] [smallint] NULL,
	[SEXO] [varchar](1) NULL,
	[LIMITE DE CREDITO] [money] NULL,
	[VOLUME DE COMPRA] [float] NULL,
	[PRIMEIRA COMPRA] [bit] NULL,
	CONSTRAINT [PK_CLIENTES] PRIMARY KEY (CPF)
)
GO
--INSERINDO REGISTRO NA TABELA  DE CLIENTES
INSERT INTO CLIENTES (CPF,NOME,ENDERECO,COMPLEMENTO,BAIRRO,CIDADE,ESTADO,CEP,[DATA DE NASCIMENTO],IDADE,SEXO,
[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]
)
SELECT * FROM ESQUINA_VENDAS.dbo.[TABELA DE CLIENTES]
GO

SELECT * FROM CLIENTES

--BACKUP DO BD_1
BACKUP DATABASE BD_1 TO DISK = 'F:\TEMP\DISCO E\BD_1.BAK'

------------ dando acesso para mais um usuario  ------
USE BD_1
GO
--MAPEANDO O USER_2 PARA DB_1
CREATE USER USER_2 FOR LOGIN USER_2
GO
--USO DO GRANT
--CONCEDENDO ACESSO
GRANT SELECT ON [VENDEDORES] TO USER_2
GO
GRANT SELECT ON [CLIENTES] (CPF,NOME) TO USER_2
GO

USE master
GO
--DANDO PERMISSAO
GRANT CONNECT SQL TO USER_2
GO

--TIRANDO A PERMISSAO
USE master
GO
REVOKE CONNECT SQL TO USER_2

-- COM USER_1 --

SELECT SYSTEM_USER

SELECT * FROM CLIENTES

SELECT * FROM VENDEDORES

--ACESSO NEGADO
CREATE TABLE TESTE (
	NOME VARCHAR (50) NOT NULL
)

-- COM DBA_BD_2 --

SELECT SYSTEM_USER

USE ESQUINA_VENDAS
GO

SELECT * FROM [TABELA DE VENDEDORES]

--DAR ACESSO PARA O USER_2
USE BD_2
GO

--CRIANDO USUARIO PARA O LOGIN NO BANCO DB_1
CREATE USER [USER_2] FOR LOGIN USER_2
GO

--FAZENDO COM QUE O USUARIO SEJA SOMENTE LEITOR DO BANCO BD_1
SP_ADDROLEMEMBER 'DB_DATAREADER','USER_2'
GO
--REMOVE A ROLE MEMBER
SP_DROPROLEMEMBER 'DB_DATAREADER','USER_2'
GO


-- ------ COM USER_2 ---------

SELECT SYSTEM_USER

USE BD_1
GO

SELECT * FROM VENDEDORES

--ACESSO NEGADO
SELECT * FROM CLIENTES

--LIBERADO SOMENTE COM DOIS CAMPOS
SELECT NOME,CPF FROM CLIENTES
























------------------ ******* POR ENQUANTO É SÓ :) ********   --------------


